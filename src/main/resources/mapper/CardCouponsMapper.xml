<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="erp.chain.mapper.o2o.CardCouponsMapper">
    <resultMap id="BaseResultMap" type="erp.chain.domain.o2o.CardCoupons">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Fri Nov 04 15:05:01 CST 2016.
        -->
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="tenant_id" property="tenantId" jdbcType="BIGINT"/>
        <result column="card_name" property="cardName" jdbcType="VARCHAR"/>
        <result column="card_type" property="cardType" jdbcType="BIGINT"/>
        <result column="limit_value" property="limitValue" jdbcType="DECIMAL"/>
        <result column="face_value" property="faceValue" jdbcType="DECIMAL"/>
        <result column="gift_goods_id" property="giftGoodsId" jdbcType="BIGINT"/>
        <result column="gift_num" property="giftNum" jdbcType="BIGINT"/>
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
        <result column="end_time" property="endTime" jdbcType="TIMESTAMP"/>
        <result column="period_of_validity" property="periodOfValidity" jdbcType="BIGINT"/>
        <result column="color_value" property="colorValue" jdbcType="VARCHAR"/>
        <result column="gift_goods_photo" property="giftGoodsPhoto" jdbcType="VARCHAR"/>
        <result column="gift_goods_name" property="giftGoodsName" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="create_by" property="createBy" jdbcType="VARCHAR"/>
        <result column="create_at" property="createAt" jdbcType="TIMESTAMP"/>
        <result column="last_update_by" property="lastUpdateBy" jdbcType="VARCHAR"/>
        <result column="last_update_at" property="lastUpdateAt" jdbcType="TIMESTAMP"/>
        <result column="is_deleted" property="isDeleted" jdbcType="BIT"/>
    </resultMap>

    <insert id="addCardCoupons" parameterType="map" useGeneratedKeys="true" keyProperty="id">
    insert into card_coupons (id,tenant_id,card_name,
    card_type,limit_value,face_value,gift_goods_id,gift_num,
    gift_goods_name,gift_goods_photo,start_time,end_time,
    period_of_validity,color_value,remark,create_by,create_at,
    last_update_by,last_update_at,is_deleted,discount,
    open_send_rule,open_use_rule,
    limit_goods_ids,limit_branch_ids,limit_goods_names,limit_branch_names,status,festival_id,
    manual_get,send_all_amount,sended_amount,use_limit,day_get_limit,total_get_limit,send_limit_value,
    weekday1,weekday2,weekday3,weekday4,weekday5,weekday6,weekday7,use_start_time,use_end_time,
    send_start_time,send_end_time,branch_id
    )
    VALUES (#{id,jdbcType=BIGINT},#{tenantId,jdbcType=BIGINT},#{cardName,jdbcType=VARCHAR},
    #{cardType,jdbcType=BIGINT},#{limitValue,jdbcType=DECIMAL},#{faceValue,jdbcType=DECIMAL},
    #{giftGoodsId,jdbcType=BIGINT},#{giftNum,jdbcType=BIGINT},#{giftGoodsName,jdbcType=VARCHAR},
    #{giftGoodsPhoto,jdbcType=VARCHAR},#{startTime,jdbcType=TIMESTAMP},#{endTime,jdbcType=TIMESTAMP},
    #{periodOfValidity,jdbcType=BIGINT},#{colorValue,jdbcType=VARCHAR},#{remark,jdbcType=VARCHAR},
    #{createBy,jdbcType=VARCHAR},#{createAt,jdbcType=TIMESTAMP},#{lastUpdateBy,jdbcType=VARCHAR},
    #{lastUpdateAt,jdbcType=TIMESTAMP},0,#{discount,jdbcType=DECIMAL},
    #{openSendRule, jdbcType=BIT},#{openUseRule, jdbcType=BIT},
    #{limitGoodsIds,jdbcType=VARCHAR},#{limitBranchIds,jdbcType=VARCHAR},#{limitGoodsNames,jdbcType=VARCHAR},#{limitBranchNames,jdbcType=VARCHAR},
    #{status, jdbcType=BIT},#{festivalId,jdbcType=BIGINT},
    #{manualGet},#{sendAllAmount},#{sendedAmount},#{useLimit},#{dayGetLimit},#{totalGetLimit},#{sendLimitValue},
    #{weekday1},#{weekday2},#{weekday3},#{weekday4},#{weekday5},#{weekday6},#{weekday7},#{useStartTime},#{useEndTime},
    #{sendStartTime},#{sendEndTime},#{branchId}
    )
  </insert>

    <insert id="addCardCouponsReport" parameterType="erp.chain.domain.CardCouponsReport" useGeneratedKeys="true"
            keyProperty="id">
    insert into card_coupons_report (id,tenant_id,card_name,card_coupons_id,
    card_type,limit_value,face_value,create_by,create_at,
    last_update_by,last_update_at,is_deleted,discount,
    send_number,used_number
    )
    VALUES (#{id,jdbcType=BIGINT},#{tenantId,jdbcType=BIGINT},#{cardName,jdbcType=VARCHAR},#{cardCouponsId,jdbcType=BIGINT},
    #{cardType,jdbcType=BIGINT},#{limitValue,jdbcType=DECIMAL},#{faceValue,jdbcType=DECIMAL},
    #{createBy,jdbcType=VARCHAR},#{createAt,jdbcType=TIMESTAMP},#{lastUpdateBy,jdbcType=VARCHAR},
    #{lastUpdateAt,jdbcType=TIMESTAMP},0,#{discount,jdbcType=DECIMAL},
    #{sendNumber,jdbcType=BIGINT},#{usedNumber,jdbcType=BIGINT}
    )
  </insert>

    <update id="updateCardCouponsReport" parameterType="erp.chain.domain.CardCouponsReport">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Fri Nov 04 15:05:01 CST 2016.
        -->
        update card_coupons_report
        <set>
            <if test="cardName != null">
                card_name = #{cardName,jdbcType=VARCHAR},
            </if>
            <if test="cardType != null">
                card_type = #{cardType,jdbcType=BIGINT},
            </if>
            <if test="sendNumber != null">
                send_number = #{sendNumber,jdbcType=BIGINT},
            </if>
            <if test="usedNumber != null">
                used_number = #{usedNumber,jdbcType=BIGINT},
            </if>
            <if test="limitValue != null">
                limit_value = #{limitValue,jdbcType=DECIMAL},
            </if>
            <if test="faceValue != null">
                face_value = #{faceValue,jdbcType=DECIMAL},
            </if>
            <if test="createBy != null">
                create_by = #{createBy, jdbcType=VARCHAR},
            </if>
            <if test="createAt != null">
                create_at = #{createAt, jdbcType=TIMESTAMP},
            </if>
            <if test="lastUpdateBy != null">
                last_update_by = #{lastUpdateBy, jdbcType=VARCHAR},
            </if>
            <if test="lastUpdateAt != null">
                last_update_at = #{lastUpdateAt, jdbcType=TIMESTAMP},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted, jdbcType=BIT},
            </if>
            <if test="discount != null">
                discount = #{discount,jdbcType=DECIMAL}
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>


    <update id="updateCardCoupons" parameterType="map">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Fri Nov 04 15:05:01 CST 2016.
        -->
        update card_coupons SET
                tenant_id = #{tenantId,jdbcType=BIGINT},
                card_name = #{cardName,jdbcType=VARCHAR},
                card_type = #{cardType,jdbcType=BIGINT},
                limit_value = #{limitValue,jdbcType=DECIMAL},
                face_value = #{faceValue,jdbcType=DECIMAL},
                gift_goods_id = #{giftGoodsId,jdbcType=BIGINT},
                gift_num = #{giftNum,jdbcType=BIGINT},
                gift_goods_name = #{giftGoodsName,jdbcType=VARCHAR},
                gift_goods_photo = #{giftGoodsPhoto,jdbcType=VARCHAR},
                start_time = #{startTime,jdbcType=TIMESTAMP},
                end_time = #{endTime,jdbcType=TIMESTAMP},
                period_of_validity = #{periodOfValidity,jdbcType=BIGINT},
                color_value = #{colorValue,jdbcType=VARCHAR},
                remark = #{remark,jdbcType=VARCHAR},
                create_by = #{createBy, jdbcType=VARCHAR},
                create_at = #{createAt, jdbcType=TIMESTAMP},
                last_update_by = #{lastUpdateBy, jdbcType=VARCHAR},
                last_update_at = #{lastUpdateAt, jdbcType=TIMESTAMP},
                is_deleted = #{isDeleted, jdbcType=BIT},
                status = #{status, jdbcType=BIT},
                open_use_rule = #{openUseRule, jdbcType=BIT},
                open_send_rule = #{openSendRule, jdbcType=BIT},
                limit_goods_ids = #{limitGoodsIds, jdbcType=VARCHAR},
                limit_branch_ids = #{limitBranchIds, jdbcType=VARCHAR},
                limit_goods_names = #{limitGoodsNames, jdbcType=VARCHAR},
                limit_branch_names = #{limitBranchNames, jdbcType=VARCHAR},
                festival_id = #{festivalId,jdbcType=BIGINT},
                discount = #{discount,jdbcType=DECIMAL},
                manual_get = #{manualGet},
                send_all_amount = #{sendAllAmount},
                sended_amount = #{sendedAmount},
                use_limit = #{useLimit},
                day_get_limit = #{dayGetLimit},
                total_get_limit = #{totalGetLimit},
                weekday1 = #{weekday1},
                weekday2 = #{weekday2},
                weekday3 = #{weekday3},
                weekday4 = #{weekday4},
                weekday5 = #{weekday5},
                weekday6 = #{weekday6},
                weekday7 = #{weekday7},
                use_start_time = #{useStartTime},
                use_end_time = #{useEndTime},
                send_start_time = #{sendStartTime},
                send_end_time = #{sendEndTime},
                send_limit_value = #{sendLimitValue}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="cardCouponsListWithGoodsOrBranch" parameterType="map" resultType="erp.chain.domain.o2o.CardCoupons">
        SELECT * FROM card_coupons cc WHERE is_deleted=0
        <if test="tenantId != null and tenantId != ''">
            AND cc.tenant_id =${tenantId}
        </if>
        AND ((cc.limit_goods_ids IS NOT NULL AND cc.limit_goods_ids !='') OR (cc.limit_branch_ids IS NOT NULL AND cc.limit_branch_ids != ''))
    </select>
    <select id="cardCouponsList" parameterType="map" resultType="erp.chain.domain.o2o.CardCoupons">
        SELECT * FROM card_coupons cc WHERE cc.is_deleted=0
        <if test="id != null and id != ''">
            AND cc.id =#{id}
        </if>
        <if test="tenantId != null and tenantId != ''">
            AND cc.tenant_id =${tenantId}
        </if>
        <if test="status != null and status != ''">
            AND cc.status =#{status}
        </if>
        <if test="manualGet != null and manualGet != ''">
            AND cc.manual_get =#{manualGet}
        </if>
        <if test="openSendRule != null and openSendRule != ''">
            AND cc.open_send_rule =#{openSendRule}
        </if>
        <if test="cardType != null and cardType != ''">
            AND cc.card_type =#{cardType}
        </if>
        <if test="queryStr != null and queryStr != ''">
            AND (cc.card_name like '%${queryStr}%')
        </if>
        <if test="useDate != null and useDate != ''">
            AND (cc.period_of_validity!=-1 OR (cc.period_of_validity=-1 AND cc.start_time &lt;='${useDate}' AND cc.end_time &gt;='${useDate}') OR (cc.period_of_validity=-1 AND cc.start_time IS NULL AND cc.end_time IS NULL))
        </if>
        <if test="getDate != null and getDate != ''">
            AND ((cc.send_start_time IS NULL AND cc.send_end_time IS NULL) OR (cc.send_start_time &lt;='${getDate}' AND cc.send_end_time &gt;='${getDate}') )
            AND ((cc.start_time IS NULL AND cc.end_time IS NULL) OR (cc.start_time &lt;='${getDate}' AND cc.end_time &gt;='${getDate}'))
        </if>
        <if test="receivedAmount != null and receivedAmount != ''">
            AND (cc.send_limit_value IS NULL OR cc.send_limit_value &lt;= #{receivedAmount})
        </if>
        ORDER BY cc.create_at DESC
        <if test="offset != null and rows!=''">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="getCardCouponsList" parameterType="map" resultType="mapUnderscoreToCamelCase">
        SELECT cc.*,count(ctv.id) use_amount  FROM card_coupons cc
        LEFT JOIN card_to_vip ctv ON cc.tenant_id=ctv.tenant_id AND cc.id=ctv.card_coupons_id AND ctv.is_deleted=0 AND ctv.use_status=1
        WHERE cc.is_deleted=0
        <if test="id != null and id != ''">
            AND cc.id =#{id}
        </if>
        <if test="tenantId != null and tenantId != ''">
            AND cc.tenant_id =${tenantId}
        </if>
        <if test="status != null and status != ''">
            AND cc.status =#{status}
        </if>
        <if test="manualGet != null and manualGet != ''">
            AND cc.manual_get =#{manualGet}
        </if>
        <if test="openSendRule != null and openSendRule != ''">
            AND cc.open_send_rule =#{openSendRule}
        </if>
        <if test="cardType != null and cardType != ''">
            AND cc.card_type =#{cardType}
        </if>
        <if test="queryStr != null and queryStr != ''">
            AND (cc.card_name like '%${queryStr}%')
        </if>
        <if test="useDate != null and useDate != ''">
            AND (cc.period_of_validity!=-1 OR (cc.period_of_validity=-1 AND cc.start_time &lt;='${useDate}' AND cc.end_time &gt;='${useDate}') OR (cc.period_of_validity=-1 AND cc.start_time IS NULL AND cc.end_time IS NULL))
        </if>
        <if test="getDate != null and getDate != ''">
            AND ((cc.send_start_time IS NULL AND cc.send_end_time IS NULL) OR (cc.send_start_time &lt;='${getDate}' AND cc.send_end_time &gt;='${getDate}') )
        </if>
        <if test="receivedAmount != null and receivedAmount != ''">
            AND (cc.send_limit_value IS NULL OR cc.send_limit_value &lt;= #{receivedAmount})
        </if>
        GROUP BY cc.id
        ORDER BY cc.create_at DESC
        <if test="offset != null and rows!=''">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="cardCouponsReportList" parameterType="map" resultType="erp.chain.domain.CardCouponsReport">
        SELECT * FROM card_coupons_report cc WHERE is_deleted=0
        <if test="id != null and id != ''">
            AND cc.id =#{id}
        </if>
        <if test="tenantId != null and tenantId != ''">
            AND cc.tenant_id =${tenantId}
        </if>
        <if test="cardCouponsId != null and cardCouponsId != ''">
            AND cc.card_coupons_id =#{cardCouponsId}
        </if>
        <if test="cardType != null and cardType != ''">
            AND cc.card_type =#{cardType}
        </if>
        <if test="offset != null and rows!=''">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="findCardCouponsById" parameterType="map" resultType="erp.chain.domain.o2o.CardCoupons">
        SELECT * FROM card_coupons cc WHERE is_deleted=0
        <if test="id != null and id != ''">
            AND cc.id =#{id}
        </if>
        <if test="tenantId != null and tenantId != ''">
            AND cc.tenant_id =${tenantId}
        </if>
        <if test="offset != null and rows!=''">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="findCardCouponsByIdIncludeDelete" parameterType="map" resultType="erp.chain.domain.o2o.CardCoupons">
        SELECT * FROM card_coupons cc WHERE 1=1
        <if test="id != null and id != ''">
            AND cc.id =#{id}
        </if>
        <if test="tenantId != null and tenantId != ''">
            AND cc.tenant_id =${tenantId}
        </if>
        <if test="offset != null and rows!=''">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="getById" resultType="erp.chain.domain.o2o.CardCoupons">
        SELECT * FROM card_coupons cc WHERE is_deleted=0
        <if test="couponsId != null and couponsId != ''">
            AND cc.id =#{couponsId}
        </if>
        <if test="tenantId != null and tenantId != ''">
            AND cc.tenant_id =${tenantId}
        </if>
    </select>

    <update id="deleteCouponsGoods">
        UPDATE card_coupons_goods_r SET is_deleted=1,last_update_at=NOW() WHERE tenant_id=#{tenantId} AND coupons_id=#{couponsId} AND is_deleted=0
    </update>
    <update id="deleteCouponsBranch">
        UPDATE card_coupons_branch_r SET is_deleted=1,last_update_at=NOW() WHERE tenant_id=#{tenantId} AND coupons_id=#{couponsId} AND is_deleted=0
    </update>
    <insert id="insertCouponsGoods" >
        INSERT INTO card_coupons_goods_r
        (coupons_id,tenant_id,branch_id,goods_id,create_at,create_by,last_update_at,last_update_by,is_deleted)
        VALUES
        <foreach collection="goodsIds" item="goodsId" separator=",">
            (#{couponsId},#{tenantId},#{branchId},#{goodsId},NOW(),'WEB',NOW(),'WEB',0)
        </foreach>
    </insert>
    <insert id="insertCouponsBranch" >
        INSERT INTO card_coupons_branch_r
        (coupons_id,tenant_id,branch_id,create_at,create_by,last_update_at,last_update_by,is_deleted)
        VALUES
        <foreach collection="branchIds" item="branchId" separator=",">
            (#{couponsId},#{tenantId},#{branchId},NOW(),'WEB',NOW(),'WEB',0)
        </foreach>
    </insert>
    <select id="getCouponsBranch" resultType="String">
        SELECT branch_id FROM card_coupons_branch_r WHERE tenant_id=#{tenantId} AND coupons_id=#{couponsId} AND is_deleted=0
    </select>

    <select id="countCouponsGoods" resultType="long">
        SELECT COUNT(*) FROM card_coupons_goods_r WHERE tenant_id=#{tenantId} AND coupons_id=#{couponsId} AND is_deleted=0
    </select>

    <select id="countCouponsBranch" resultType="long">
        SELECT COUNT(*) FROM card_coupons_branch_r WHERE tenant_id=#{tenantId} AND coupons_id=#{couponsId} AND is_deleted=0
    </select>

    <select id="countCouponUsed" resultType="long">
        SELECT count(1) FROM card_to_vip ctv WHERE ctv.tenant_id=#{tenantId} AND card_coupons_id=#{couponsId} AND is_deleted=0 AND use_status=0
    </select>

    <update id="updateSendedAmount">
        UPDATE card_coupons SET sended_amount=#{sendedAmount},last_update_at=NOW() WHERE tenant_id=#{tenantId} AND id=#{couponsId} AND is_deleted=0
    </update>

    <select id="cardCouponsReport" resultType="erp.chain.domain.CardCouponsReport">
        SELECT * FROM card_coupons_report cc WHERE is_deleted=0
        <if test="tenantId != null and tenantId != ''">
            AND cc.tenant_id =${tenantId}
        </if>
        <if test="couponsId != null and couponsId != ''">
            AND cc.card_coupons_id =#{couponsId}
        </if>
        limit 1
    </select>
    <insert id="insertMarketingOrder" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO precision_marketing_order
        (
          is_deleted,
          created_by,
          updated_by,
          created_at,
          updated_at,
          tenant_id,
          branch_id,
          code,
          name,
          send_group_id,
          vip_quantity,
          content,
          score,
          exp
        )VALUES
        (
          #{isDeleted},
          #{createdBy},
          #{updatedBy},
          #{createdAt},
          #{updatedAt},
          #{tenantId},
          #{branchId},
          #{code},
          #{name},
          #{sendGroupId},
          #{vipQuantity},
          #{content},
          #{score},
          #{exp}
        )
    </insert>
    <insert id="insertMarketingOrderCouponsDetail" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO precision_marketing_order_coupons_detail
        (
          is_deleted,
          created_by,
          updated_by,
          created_at,
          updated_at,
          tenant_id,
          branch_id,
          order_id,
          coupons_id,
          coupons_quantity
        )VALUES
        (
          #{isDeleted},
          #{createdBy},
          #{updatedBy},
          #{createdAt},
          #{updatedAt},
          #{tenantId},
          #{branchId},
          #{orderId},
          #{couponsId},
          #{couponsQuantity}
        )
    </insert>
    <insert id="insertMarketingOrderVipDetail" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO precision_marketing_order_vip_detail
        (
          is_deleted,
          created_by,
          updated_by,
          created_at,
          updated_at,
          tenant_id,
          branch_id,
          order_id,
          vip_id
        )VALUES
        (
          #{isDeleted},
          #{createdBy},
          #{updatedBy},
          #{createdAt},
          #{updatedAt},
          #{tenantId},
          #{branchId},
          #{orderId},
          #{vipId}
        )
    </insert>
    <insert id="insertBookList">
        insert into card_coupons_book (
        is_deleted,
        created_by,
        updated_by,
        created_at,
        updated_at,
        tenant_id,
        branch_id,
        card_coupons_id,
        vip_id,
        channel,
        card_code,
        business,
        order_id,
        order_code,
        state,
        memo
        )
        values
        <foreach collection="cardCouponsBookList" item="book" separator=",">
            (
            #{book.isDeleted},
            #{book.createdBy},
            #{book.updatedBy},
            #{book.createdAt},
            #{book.updatedAt},
            #{book.tenantId},
            #{book.branchId},
            #{book.cardCouponsId},
            #{book.vipId},
            #{book.channel},
            #{book.cardCode},
            #{book.business},
            #{book.orderId},
            #{book.orderCode},
            #{book.state},
            #{book.memo}
            )
        </foreach>
    </insert>

    <select id="listMarketingOrder" resultType="mapUnderscoreToCamelCase">
        SELECT pmo.*,GROUP_CONCAT(cc.card_name,"*",pmocd.coupons_quantity,"张" separator '，') card_info
        FROM precision_marketing_order pmo
        LEFT JOIN precision_marketing_order_coupons_detail pmocd ON pmo.tenant_id=pmocd.tenant_id AND pmo.branch_id=pmocd.branch_id AND pmo.id=pmocd.order_id
        INNER JOIN card_coupons cc ON cc.tenant_id=pmocd.tenant_id AND cc.id=pmocd.coupons_id
        WHERE pmo.tenant_id=#{tenantId}
        AND pmo.branch_id=#{branchId}
        AND pmo.is_deleted=0
        GROUP BY pmo.id
        ORDER BY pmo.created_at DESC
        <if test="offset!=null and rows!=null">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="countMarketingOrder" resultType="long">
        SELECT count(1)
        FROM precision_marketing_order pmo
        WHERE pmo.tenant_id=#{tenantId}
        AND pmo.branch_id=#{branchId}
        AND pmo.is_deleted=0
    </select>
    <select id="orderDetail" resultType="mapUnderscoreToCamelCase">
        SELECT r.created_at,r.vip_name,r.phone,IFNULL(GROUP_CONCAT(r.card_info),"")card_info,IFNULL(GROUP_CONCAT(r.error_info),"")error_info FROM
        (SELECT t.created_at,t.vip_id,t.vip_name,t.phone,IF(t.state=1,GROUP_CONCAT(t.card_name,"*",t.count,"张" separator '，'),NULL)card_info,IF(t.state=0,GROUP_CONCAT(t.error_info separator '；${separator}'),NULL)error_info FROM
        (SELECT ccb.vip_id,ccb.card_coupons_id,v.vip_name,v.phone,ccb.state,ccb.created_at,ccb.memo,cc.card_name,count(1)count,IF(ccb.state=0,GROUP_CONCAT(cc.card_name,"*1张发送失败，失败原因：",ccb.memo separator '；${separator}'),NULL)error_info FROM card_coupons_book ccb
        INNER JOIN vip v ON v.tenant_id=ccb.tenant_id AND v.id=ccb.vip_id
        INNER JOIN card_coupons cc ON cc.tenant_id=ccb.tenant_id AND cc.id=ccb.card_coupons_id
        WHERE ccb.tenant_id=#{tenantId}
        AND ccb.branch_id=#{branchId}
        AND ccb.is_deleted=0
        AND ccb.order_id=#{orderId}
        <if test="queryStr!=null">
            AND (v.vip_name LIKE '%${queryStr}%' OR v.phone LIKE '%${queryStr}%')
        </if>
        AND ccb.business="coupons_get"
        AND ccb.channel="direct"
        GROUP BY ccb.vip_id,ccb.card_coupons_id,ccb.state) t
        GROUP BY t.vip_id,t.state) r
        GROUP BY r.vip_id
        <if test="offset!=null and rows!=null">
          LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="countOrderDetail" resultType="mapUnderscoreToCamelCase">
        SELECT count(DISTINCT(ccb.vip_id)) total,IFNULL(SUM(IF(ccb.state=1,1,0)),0)card_info FROM card_coupons_book ccb
        INNER JOIN vip v ON ccb.tenant_id=v.tenant_id AND ccb.vip_id=v.id
        WHERE ccb.tenant_id=#{tenantId}
        AND ccb.branch_id=#{branchId}
        AND ccb.is_deleted=0
        AND ccb.order_id=#{orderId}
        <if test="queryStr!=null">
            AND (v.vip_name LIKE '%${queryStr}%' OR v.phone LIKE '%${queryStr}%')
        </if>
        AND ccb.business="coupons_get"
        AND ccb.channel="direct"
    </select>

    <select id="cardCouponsBook" resultType="mapUnderscoreToCamelCase">
        SELECT cc.id,cc.card_name,b.name,v.vip_name,v.phone,cc.card_type,ccb.channel,ccb.card_code,ccb.order_code,ccb.created_at
        FROM
        card_coupons_book ccb
        INNER JOIN branch b ON ccb.tenant_id=b.tenant_id AND ccb.branch_id=b.id
        INNER JOIN vip v ON ccb.tenant_id=v.tenant_id AND ccb.vip_id=v.id
        INNER JOIN card_coupons cc ON ccb.tenant_id=cc.tenant_id AND ccb.card_coupons_id=cc.id
        WHERE
        ccb.tenant_id=#{tenantId}
        <if test="branchId!=null">
            AND ccb.branch_id=#{branchId}
        </if>
        <if test="type!=null and type==1">
            AND ccb.business="coupons_get"
        </if>
        <if test="type!=null and type==2">
            AND (ccb.business="coupons_pay" OR ccb.business="coupons_reback")
        </if>
        <if test="channel!=null">
            AND ccb.channel=#{channel}
        </if>
        <if test="cardCode!=null">
            AND ccb.card_code=#{cardCode}
        </if>
        AND ccb.is_deleted=0
        AND ccb.state=1
        <if test="startDate!=null">
            AND ccb.created_at &gt;= '${startDate}'
        </if>
        <if test="endDate!=null">
            AND ccb.created_at &lt;= '${endDate}'
        </if>
        <if test="cardType!=null">
            AND cc.card_type=#{cardType}
        </if>
        <if test="couponsName!=null">
            AND cc.card_name LIKE '%${couponsName}%'
        </if>
        <if test="vipStr!=null">
            AND (v.vip_name LIKE '%${vipStr}%' OR v.phone LIKE '%${vipStr}%')
        </if>
        ORDER BY ccb.created_at DESC
        <if test="offset!=null and rows!=null">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="countCardCouponsBook" resultType="long">
        SELECT count(1)
        FROM
        card_coupons_book ccb
        INNER JOIN branch b ON ccb.tenant_id=b.tenant_id AND ccb.branch_id=b.id
        INNER JOIN vip v ON ccb.tenant_id=v.tenant_id AND ccb.vip_id=v.id
        INNER JOIN card_coupons cc ON ccb.tenant_id=cc.tenant_id AND ccb.card_coupons_id=cc.id
        WHERE
        ccb.tenant_id=#{tenantId}
        <if test="branchId!=null">
            AND ccb.branch_id=#{branchId}
        </if>
        <if test="type!=null and type==1">
            AND ccb.business="coupons_get"
        </if>
        <if test="type!=null and type==2">
            AND (ccb.business="coupons_pay" OR ccb.business="coupons_reback")
        </if>
        <if test="channel!=null">
            AND ccb.channel=#{channel}
        </if>
        <if test="cardCode!=null">
            AND ccb.card_code=#{cardCode}
        </if>
        AND ccb.is_deleted=0
        AND ccb.state=1
        <if test="startDate!=null">
            AND ccb.created_at &gt;= '${startDate}'
        </if>
        <if test="endDate!=null">
            AND ccb.created_at &lt;= '${endDate}'
        </if>
        <if test="cardType!=null">
            AND cc.card_type=#{cardType}
        </if>
        <if test="couponsName!=null">
            AND cc.card_name LIKE '%${couponsName}%'
        </if>
        <if test="vipStr!=null">
            AND (v.vip_name LIKE '%${vipStr}%' OR v.phone LIKE '%${vipStr}%')
        </if>
    </select>
    <select id="couponsAccount" resultType="mapUnderscoreToCamelCase">
        SELECT
        <if test="detail==1 or detail==2">
            DATE_FORMAT(ccb.created_at, '%Y-%m-%d') date,
        </if>
        <if test="detail==3 or detail==4">
            DATE_FORMAT(ccb.created_at, '%Y-%m') date,
        </if>
        <if test="detail==5 or detail==6">
            b.name branch_name,
        </if>
        <if test="detail==1 or detail==3 or detail==5">
            cc.id,
            cc.card_name,
            cc.card_type,
        </if>
        SUM(IF(ccb.business="coupons_get" AND ccb.state=1,1,0))get_count,
        SUM(IF(ccb.business="coupons_pay" AND ccb.state=1,1,0))pay_count,
        SUM(IF(ccb.business="coupons_reback" AND ccb.state=1,-1,0))re_count
        FROM card_coupons_book ccb
        INNER JOIN card_coupons cc ON ccb.tenant_id=cc.tenant_id AND ccb.card_coupons_id=cc.id
        INNER JOIN branch b ON ccb.tenant_id=b.tenant_id AND ccb.branch_id=b.id
        WHERE
        ccb.tenant_id=#{tenantId}
        <if test="branchId!=null">
            AND ccb.branch_id=#{branchId}
        </if>
        <if test="startDate!=null">
            AND ccb.created_at &gt;= '${startDate}'
        </if>
        <if test="endDate!=null">
            AND ccb.created_at &lt;= '${endDate}'
        </if>
        AND ccb.is_deleted=0
        <if test="detail==1 or detail==3 or detail==5">
            <if test="couponsName!=null">
                AND cc.card_name LIKE '%${couponsName}%'
            </if>
        </if>
        <if test="detail!=null and detail==1">
            GROUP BY ccb.card_coupons_id,DATE_FORMAT(ccb.created_at, '%Y-%m-%d')
        </if>
        <if test="detail!=null and detail==2">
            GROUP BY DATE_FORMAT(ccb.created_at, '%Y-%m-%d')
        </if>
        <if test="detail!=null and detail==3">
            GROUP BY ccb.card_coupons_id,DATE_FORMAT(ccb.created_at, '%Y-%m')
        </if>
        <if test="detail!=null and detail==4">
            GROUP BY DATE_FORMAT(ccb.created_at, '%Y-%m')
        </if>
        <if test="detail!=null and detail==5">
            GROUP BY ccb.branch_id,ccb.card_coupons_id
        </if>
        <if test="detail!=null and detail==6">
            GROUP BY ccb.branch_id
        </if>
        <if test="detail==1 or detail==2">
            ORDER BY DATE_FORMAT(ccb.created_at, '%Y-%m-%d') DESC,ccb.card_coupons_id ASC
        </if>
        <if test="detail==3 or detail==4">
            ORDER BY DATE_FORMAT(ccb.created_at, '%Y-%m') DESC,ccb.card_coupons_id ASC
        </if>
        <if test="detail==5 or detail==6">
            ORDER BY ccb.branch_id ASC,ccb.card_coupons_id ASC
        </if>
        <if test="offset!=null and rows!=null">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="countCouponsAccount" resultType="long">
        SELECT count(1)
        FROM(
        SELECT
        ccb.id
        FROM card_coupons_book ccb
        INNER JOIN card_coupons cc ON ccb.tenant_id=cc.tenant_id AND ccb.card_coupons_id=cc.id
        INNER JOIN branch b ON ccb.tenant_id=b.tenant_id AND ccb.branch_id=b.id
        WHERE
        ccb.tenant_id=#{tenantId}
        <if test="branchId!=null">
            AND ccb.branch_id=#{branchId}
        </if>
        <if test="startDate!=null">
            AND ccb.created_at &gt;= '${startDate}'
        </if>
        <if test="endDate!=null">
            AND ccb.created_at &lt;= '${endDate}'
        </if>
        AND ccb.is_deleted=0
        <if test="detail==1 or detail==3 or detail==5">
            <if test="couponsName!=null">
                AND cc.card_name LIKE '%${couponsName}%'
            </if>
        </if>
        <if test="detail!=null and detail==1">
            GROUP BY ccb.card_coupons_id,DATE_FORMAT(ccb.created_at, '%Y-%m-%d')
        </if>
        <if test="detail!=null and detail==2">
            GROUP BY DATE_FORMAT(ccb.created_at, '%Y-%m-%d')
        </if>
        <if test="detail!=null and detail==3">
            GROUP BY ccb.card_coupons_id,DATE_FORMAT(ccb.created_at, '%Y-%m')
        </if>
        <if test="detail!=null and detail==4">
            GROUP BY DATE_FORMAT(ccb.created_at, '%Y-%m')
        </if>
        <if test="detail!=null and detail==5">
            GROUP BY ccb.branch_id,ccb.card_coupons_id
        </if>
        <if test="detail!=null and detail==6">
            GROUP BY ccb.branch_id
        </if>
        )t
    </select>
</mapper>