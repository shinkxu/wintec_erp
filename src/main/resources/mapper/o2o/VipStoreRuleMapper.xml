<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="erp.chain.mapper.o2o.VipStoreRuleMapper">
    <select id="vipStoreRuleList" resultType="VipStoreRule">
        SELECT * FROM vip_store_rule WHERE is_deleted=0
        <if test="branchId != null and branchId != ''">
            AND branch_id =#{branchId}
        </if>
        <if test="tenantId != null and tenantId != ''">
            AND tenant_id =${tenantId}
        </if>
        <if test="isOff != null">
            AND is_off = #{isOff}
        </if>
        <if test="off != null">
            AND is_off = #{off}
        </if>
        <if test="noBranch != null and noBranch != ''">
            AND branch_id IS NULL
        </if>
    </select>
    <select id="findByCondition" resultType="erp.chain.domain.o2o.VipStoreRule">
        SELECT * FROM vip_store_rule WHERE is_deleted=0
        <if test="tenantId != null and tenantId != ''">
            AND tenant_id =${tenantId}
        </if>
        <if test="branchId != null and branchId != ''">
            AND branch_id =#{branchId}
        </if>
        <if test="id != null and id != ''">
            AND id =#{id}
        </if>
        <if test="isOff != null">
            AND is_off = #{isOff}
        </if>
        <if test="off != null">
            AND is_off = #{off}
        </if>
    </select>
    <select id="findOldRule" resultType="erp.chain.domain.o2o.VipStoreRule">
        SELECT * FROM vip_store_rule WHERE is_deleted=0 AND branch_id IS NULL
        <if test="tenantId != null and tenantId != ''">
            AND tenant_id =${tenantId}
        </if>
        <if test="isOff != null and isOff != ''">
            AND is_off =#{isOff}
        </if>

    </select>
    <insert id="insert" parameterType="map"  useGeneratedKeys="true" keyProperty="id">
        insert into vip_store_rule (id, tenant_id, branch_id,
        is_off, dead_type, dead_num,
        dead_unit,
        create_by, create_at, last_update_by,
        last_update_at, is_deleted,
         version, local_id,is_fixed_store
        )
        values (#{id,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT},
        #{isOff,jdbcType=BIT}, #{deadType,jdbcType=VARCHAR}, #{deadNum,jdbcType=BIGINT},
        #{deadUnit,jdbcType=VARCHAR},
        #{createBy,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP}, #{lastUpdateBy,jdbcType=VARCHAR},
        #{lastUpdateAt,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=BIT},
        #{version,jdbcType=BIGINT}, #{localId,jdbcType=BIGINT},
        #{isFixedStore,jdbcType=BIT}
        )
    </insert>
    <update id="update" parameterType="map" >
        update vip_store_rule
        <set >
            <if test="tenantId != null" >
                tenant_id = #{tenantId,jdbcType=BIGINT},
            </if>
            <if test="branchId != null" >
                branch_id = #{branchId,jdbcType=BIGINT},
            </if>
            <if test="isOff != null" >
                is_off = #{isOff,jdbcType=BIT},
            </if>
            <if test="isFixedStore != null" >
                is_fixed_store = #{isFixedStore,jdbcType=BIT},
            </if>
            <if test="deadType != null" >
                dead_type = #{deadType,jdbcType=VARCHAR},
            </if>
            <if test="deadNum != null" >
                dead_num = #{deadNum,jdbcType=BIGINT},
            </if>
            <if test="deadUnit != null" >
                dead_unit = #{deadUnit,jdbcType=VARCHAR},
            </if>
            <if test="createBy != null" >
                create_by = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null" >
                create_at = #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="lastUpdateBy != null" >
                last_update_by = #{lastUpdateBy,jdbcType=VARCHAR},
            </if>
            <if test="lastUpdateAt != null" >
                last_update_at = #{lastUpdateAt,jdbcType=TIMESTAMP},
            </if>
            <if test="isDeleted != null" >
                is_deleted = #{isDeleted,jdbcType=BIT},
            </if>
            <if test="version != null" >
                version = #{version,jdbcType=BIGINT},
            </if>
            <if test="localId != null" >
                local_id = #{localId,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <!--储值对账查询-->
    <select id="queryStoreStatements" resultType="mapUnderscoreToCamelCase">
      SELECT sb.id, sb.code, sb.create_branch_id, sb.charge_branch_id, sb.pay_at, sb.charge_amount, b.name branch_name, sb.status, sb.create_at, e.name create_by FROM
      storage_bill sb
      INNER JOIN branch b ON sb.tenant_id = b.tenant_id AND sb.charge_branch_id = b.id
      INNER JOIN employee e ON sb.tenant_id = e.tenant_id AND sb.create_by = e.id
      WHERE sb.is_deleted = 0
      <if test="startDate != null and startDate != ''">
          AND sb.create_at &gt;= '${startDate} 00:00:00'
      </if>
      <if test="endDate != null and endDate != ''">
          AND sb.create_at &lt;= '${endDate} 23:59:59'
      </if>
      <if test="code != null and code != ''">
          AND sb.code LIKE '%${code}%'
      </if>
      <if test="status != null and status != ''">
          AND sb.status = #{status}
      </if>
      <if test="chargeBranchId != null and chargeBranchId != ''">
          AND sb.charge_branch_id = #{chargeBranchId}
      </if>
      <if test="createBy != null and createBy != ''">
          AND sb.create_by = #{createBy}
      </if>
      <if test="offset != null and rows != null" >
         LIMIT ${offset},${rows}
      </if>
    </select>
    <select id="queryStoreStatementsSum" resultType="java.lang.Long">
        SELECT count(1) FROM
        storage_bill sb
        WHERE sb.is_deleted = 0
        <if test="startDate != null and startDate != ''">
            AND sb.create_at &gt;= '${startDate} 00:00:00'
        </if>
        <if test="endDate != null and endDate != ''">
            AND sb.create_at &lt;= '${endDate} 23:59:59'
        </if>
        <if test="code != null and code != ''">
            AND sb.code LIKE '%${code}%'
        </if>
        <if test="status != null and status != ''">
            AND sb.status = #{status}
        </if>
        <if test="chargeBranchId != null and chargeBranchId != ''">
            AND sb.charge_branch_id = #{chargeBranchId}
        </if>
        <if test="createBy != null and createBy != ''">
            AND sb.create_by = #{createBy}
        </if>
    </select>

    <!--储值消费单据-->
    <select id="queryStoreOrder" resultType="mapUnderscoreToCamelCase">
        SELECT vs.store_code, vs.create_at, IF(vs.store_type = 3, ABS(vs.pay_amount), -ABS(vs.pay_amount)) pay_amount, vs.create_by, v.vip_name, v.phone
        FROM vip_store_history vs
        INNER JOIN branch b ON vs.tenant_id = b.tenant_id AND vs.store_branch_id = b.id
        INNER JOIN vip v ON vs.tenant_id = v.tenant_id AND vs.vip_id = v.id
        WHERE vs.tenant_id = #{tenantId} AND vs.store_type IN (3,4) AND vs.is_deleted = 0
        <if test="billId != null and billId != '' and isUpdate == 0">
            AND vs.bill_id  = #{billId}
        </if>
        <if test="billId != null and billId != '' and isUpdate == 1">
            AND (vs.bill_id  = #{billId} OR vs.bill_id IS NULL)
        </if>
        <if test="billId == null or billId == ''">
            AND vs.bill_id IS NULL
        </if>
        <if test="startDate != null and startDate != ''">
            AND vs.create_at &gt;= '${startDate} 00:00:00'
        </if>
        <if test="endDate != null and endDate != ''">
            AND vs.create_at &lt;= '${endDate} 23:59:59'
        </if>
        <if test="branchId != null and branchId != ''">
            AND vs.store_branch_id = #{branchId}
        </if>
        <if test="offset != null and rows != null" >
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="queryStoreOrderSum" resultType="mapUnderscoreToCamelCase">
        SELECT count(1) total, SUM(IF(vs.store_type = 3, ABS(vs.pay_amount), -ABS(vs.pay_amount))) pay_amount
        FROM vip_store_history vs
        WHERE vs.tenant_id = #{tenantId} AND vs.store_type IN (3,4) AND vs.is_deleted = 0
        <if test="billId != null and billId != '' and isUpdate == 0">
            AND vs.bill_id  = #{billId}
        </if>
        <if test="billId != null and billId != '' and isUpdate == 1">
            AND (vs.bill_id  = #{billId} OR vs.bill_id IS NULL)
        </if>
        <if test="billId == null or billId == ''">
            AND vs.bill_id IS NULL
        </if>
        <if test="startDate != null and startDate != ''">
           AND vs.create_at &gt;= '${startDate} 00:00:00'
        </if>
        <if test="endDate != null and endDate != ''">
            AND vs.create_at &lt;= '${endDate} 23:59:59'
        </if>
        <if test="branchId != null and branchId != ''">
            AND vs.store_branch_id = #{branchId}
        </if>
    </select>
    <select id="queryBillById" resultType="erp.chain.domain.StorageBill">
        SELECT sb.*, b.name charge_branch_name, e1.name create_emp, e2.name audit_emp, e3.name confirm_emp, e4.name pay_emp FROM storage_bill sb
        INNER JOIN branch b ON sb.tenant_id = b.tenant_id AND sb.charge_branch_id = b.id
        LEFT JOIN employee e1 ON sb.tenant_id = e1.tenant_id AND sb.create_by = e1.id
        LEFT JOIN employee e2 ON sb.tenant_id = e2.tenant_id AND sb.audit_by = e2.id
        LEFT JOIN employee e3 ON sb.tenant_id = e3.tenant_id AND sb.confirm_by = e3.id
        LEFT JOIN employee e4 ON sb.tenant_id = e4.tenant_id AND sb.pay_by = e4.id
        WHERE sb.tenant_id = #{tenantId} AND sb.id = #{id} AND sb.is_deleted = 0
    </select>
    <select id="queryBillInfoById" resultType="mapUnderscoreToCamelCase">
        SELECT sb.*, b.name charge_branch_name, e1.name create_emp, e2.name audit_emp, e3.name confirm_emp, e4.name pay_emp FROM storage_bill sb
        INNER JOIN branch b ON sb.tenant_id = b.tenant_id AND sb.charge_branch_id = b.id
        LEFT JOIN employee e1 ON sb.tenant_id = e1.tenant_id AND sb.create_by = e1.id
        LEFT JOIN employee e2 ON sb.tenant_id = e2.tenant_id AND sb.audit_by = e2.id
        LEFT JOIN employee e3 ON sb.tenant_id = e3.tenant_id AND sb.confirm_by = e3.id
        LEFT JOIN employee e4 ON sb.tenant_id = e4.tenant_id AND sb.pay_by = e4.id
        WHERE sb.tenant_id = #{tenantId} AND sb.id = #{id} AND sb.is_deleted = 0
    </select>
    <select id="queryStoreByBillId" resultType="mapUnderscoreToCamelCase">
        SELECT vs.store_code, vs.create_at, IF(vs.store_type = 3, ABS(vs.pay_amount), -ABS(vs.pay_amount)) pay_amount, vs.create_by, v.vip_name, v.phone
        FROM vip_store_history vs
        INNER JOIN branch b ON vs.tenant_id = b.tenant_id AND vs.store_branch_id = b.id
        INNER JOIN vip v ON vs.tenant_id = v.tenant_id AND vs.vip_id = v.id
        WHERE vs.tenant_id = #{tenantId} AND vs.bill_id = #{billId} AND vs.is_deleted = 0 AND vs.store_type IN (3,4)
        <if test="offset != null and rows != null" >
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="queryStoreByBillIdSum" resultType="mapUnderscoreToCamelCase">
        SELECT count(1) total, SUM(IF(vs.store_type = 3, ABS(vs.pay_amount), -ABS(vs.pay_amount))) pay_amount
        FROM vip_store_history vs
        INNER JOIN branch b ON vs.tenant_id = b.tenant_id AND vs.store_branch_id = b.id
        INNER JOIN vip v ON vs.tenant_id = v.tenant_id AND vs.vip_id = v.id
        WHERE vs.tenant_id = #{tenantId} AND vs.bill_id = #{billId} AND vs.is_deleted = 0 AND vs.store_type IN (3,4)
    </select>
    <insert id="saveStorageBill" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO storage_bill (id, code, tenant_id, create_branch_id, charge_branch_id, status, audit_at, audit_by, confirm_at, confirm_by, pay_at, pay_by, charge_amount,
        create_at, create_by, last_update_at, last_update_by, is_deleted, charge_start_date, charge_end_date
        ) VALUES (#{id, jdbcType=BIGINT},#{code, jdbcType=VARCHAR}, #{tenantId, jdbcType=BIGINT},
        #{createBranchId, jdbcType=BIGINT}, #{chargeBranchId, jdbcType=BIGINT}, #{status, jdbcType=BIT}, #{auditAt, jdbcType=TIMESTAMP}, #{auditBy, jdbcType=BIGINT},
        #{confirmAt, jdbcType=TIMESTAMP}, #{confirmBy, jdbcType=BIGINT},#{payAt, jdbcType=TIMESTAMP}, #{payBy, jdbcType=BIGINT}, #{chargeAmount, jdbcType=DECIMAL},
        #{createAt, jdbcType=TIMESTAMP}, #{createBy, jdbcType=BIGINT},#{lastUpdateAt, jdbcType=TIMESTAMP}, #{lastUpdateBy, jdbcType=BIGINT},#{isDeleted, jdbcType=BIT},
        #{chargeStartDate, jdbcType=TIMESTAMP}, #{chargeEndDate, jdbcType=TIMESTAMP})
    </insert>
    <update id="updateStorageBill" parameterType="map">
        UPDATE storage_bill
        <set>
            <if test="status != null and status != ''">
                status = #{status, jdbcType=BIT},
            </if>
            <if test="isDeleted != null and isDeleted != ''">
                is_deleted = #{isDeleted, jdbcType=BIT},
            </if>
            <if test="auditAt != null and auditAt != ''">
                audit_at = #{auditAt, jdbcType=TIMESTAMP},
            </if>
            <if test="auditBy != null and auditBy != null">
                audit_by = #{auditBy, jdbcType=BIGINT},
            </if>
            <if test="confirmAt != null and confirmAt != ''">
                confirm_at = #{confirmAt, jdbcType=TIMESTAMP},
            </if>
            <if test="confirmBy != null and confirmBy != null">
                confirm_by = #{confirmBy, jdbcType=BIGINT},
            </if>
            <if test="payAt != null and payAt != ''">
                pay_at = #{payAt, jdbcType=TIMESTAMP},
            </if>
            <if test="payBy != null and payBy != null">
                pay_by = #{payBy, jdbcType=BIGINT},
            </if>
            <if test="lastUpdateAt != null and lastUpdateAt != ''">
                last_update_at = #{lastUpdateAt, jdbcType=TIMESTAMP},
            </if>
            <if test="lastUpdateBy != null and lastUpdateBy != null">
                last_update_by = #{lastUpdateBy, jdbcType=BIGINT},
            </if>
            <if test="createBranchId != null and createBranchId != ''">
                create_branch_id = #{createBranchId, jdbcType=BIGINT},
            </if>
            <if test="chargeBranchId != null and chargeBranchId != ''">
                charge_branch_id = #{chargeBranchId, jdbcType=BIGINT},
            </if>
            <if test="chargeAmount != null and chargeAmount != ''">
                charge_amount = #{chargeAmount, jdbcType=DECIMAL},
            </if>
            <if test="chargeStartDate != null and chargeStartDate != ''">
                charge_start_date = #{chargeStartDate, jdbcType=TIMESTAMP},
            </if>
            <if test="chargeEndDate != null and chargeEndDate != ''">
                charge_end_date = #{chargeEndDate, jdbcType=TIMESTAMP},
            </if>
        </set>
        WHERE tenant_id = #{tenantId} AND id = #{id}
    </update>
    <update id="updateVipStoreBillId">
        UPDATE vip_store_history SET bill_id = #{billId} WHERE tenant_id = #{tenantId} AND store_branch_id = #{branchId}
        AND create_at &gt;= '${startDate} 00:00:00' AND create_at &lt;= '${endDate} 23:59:59' AND is_deleted = 0 AND store_type IN (3,4)
        AND bill_id IS NULL
    </update>
    <update id="clearVipStoreBillId">
        UPDATE vip_store_history SET
        bill_id = NULL
        WHERE tenant_id = #{tenantId} AND is_deleted = 0 AND bill_id = #{billId} AND store_type IN (3,4)
    </update>
</mapper>