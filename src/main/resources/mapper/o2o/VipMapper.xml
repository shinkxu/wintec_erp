<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="erp.chain.mapper.o2o.VipMapper" >
  <resultMap id="BaseResultMap" type="erp.chain.domain.o2o.Vip" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="tenant_id" property="tenantId" jdbcType="BIGINT" />
    <result column="branch_id" property="branchId" jdbcType="BIGINT" />
    <result column="original_id" property="originalId" jdbcType="VARCHAR" />
    <result column="type_id" property="typeId" jdbcType="BIGINT" />
    <result column="vip_code" property="vipCode" jdbcType="VARCHAR" />
    <result column="vip_name" property="vipName" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="TINYINT" />
    <result column="birthday" property="birthday" jdbcType="DATE" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="memo" property="memo" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="buy_times" property="buyTimes" jdbcType="INTEGER" />
    <result column="sum_consume" property="sumConsume" jdbcType="DECIMAL" />
    <result column="sum_feed" property="sumFeed" jdbcType="DECIMAL" />
    <result column="sum_score" property="sumScore" jdbcType="DECIMAL" />
    <result column="remaining_score" property="remainingScore" jdbcType="DECIMAL" />
    <result column="largessscore" property="largessscore" jdbcType="DECIMAL" />
    <result column="overscore" property="overscore" jdbcType="DECIMAL" />
    <result column="vip_store_total" property="vipStoreTotal" jdbcType="DECIMAL" />
    <result column="vip_store" property="vipStore" jdbcType="DECIMAL" />
    <result column="reg_date" property="regDate" jdbcType="TIMESTAMP" />
    <result column="reg_source" property="regSource" jdbcType="VARCHAR" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
    <result column="last_update_by" property="lastUpdateBy" jdbcType="VARCHAR" />
    <result column="last_update_at" property="lastUpdateAt" jdbcType="TIMESTAMP" />
    <result column="is_deleted" property="isDeleted" jdbcType="BIT" />
    <result column="position" property="position" jdbcType="VARCHAR" />
    <result column="main_openid" property="mainOpenid" jdbcType="VARCHAR" />
    <result column="version" property="version" jdbcType="BIGINT" />
    <result column="local_id" property="localId" jdbcType="BIGINT" />
  </resultMap>

  <insert id="insert" parameterType="map" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    insert into vip (id, tenant_id, branch_id,
    original_id, type_id, vip_code,
    vip_name, sex, birthday,
    phone, email, memo,
    status, buy_times, sum_consume,
    sum_feed, sum_score, remaining_score,
    largessscore, overscore, vip_store_total,
    vip_store, reg_date, reg_source,
    create_by, create_at, last_update_by,
    last_update_at, is_deleted, position,
    main_openid, version, local_id,password_for_trading,card_id,user_card_code,label_id,vip_deposit,ali_user_id)
    values (#{id,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT},
    #{originalId,jdbcType=VARCHAR}, #{typeId,jdbcType=BIGINT}, #{vipCode,jdbcType=VARCHAR},
    #{vipName,jdbcType=VARCHAR}, #{sex,jdbcType=TINYINT}, #{birthday,jdbcType=DATE},
    #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{memo,jdbcType=VARCHAR},
    #{status,jdbcType=TINYINT}, #{buyTimes,jdbcType=INTEGER}, #{sumConsume,jdbcType=DECIMAL},
    #{sumFeed,jdbcType=DECIMAL}, #{sumScore,jdbcType=DECIMAL}, #{remainingScore,jdbcType=DECIMAL},
    #{largessscore,jdbcType=DECIMAL}, #{overscore,jdbcType=DECIMAL}, #{vipStoreTotal,jdbcType=DECIMAL},
    #{vipStore,jdbcType=DECIMAL}, #{regDate,jdbcType=TIMESTAMP}, #{regSource,jdbcType=VARCHAR},
    #{createBy,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP}, #{lastUpdateBy,jdbcType=VARCHAR},
    #{lastUpdateAt,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=BIT}, #{position,jdbcType=VARCHAR},
    #{mainOpenid,jdbcType=VARCHAR}, #{version,jdbcType=BIGINT}, #{localId,jdbcType=BIGINT},#{passwordForTrading,jdbcType=VARCHAR},
    #{cardId,jdbcType=VARCHAR},#{userCardCode,jdbcType=VARCHAR}, #{labelId,jdbcType=VARCHAR},#{deposit,jdbcType=DECIMAL},
    #{aliUserId,jdbcType=VARCHAR}
    )
  </insert>
  <insert id="insert2" parameterType="Vip" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    insert into vip (id, tenant_id, branch_id,
    original_id, type_id, vip_code,
    vip_name, sex, birthday,
    phone, email, memo,
    status, buy_times, sum_consume,
    sum_feed, sum_score, remaining_score,
    largessscore, overscore, vip_store_total,
    vip_store, reg_date, reg_source,
    create_by, create_at, last_update_by,
    last_update_at, is_deleted, position,
    main_openid, version, local_id,password_for_trading,card_id,user_card_code,vip_deposit
    )
    values (#{id,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT},
    #{originalId,jdbcType=VARCHAR}, #{typeId,jdbcType=BIGINT}, #{vipCode,jdbcType=VARCHAR},
    #{vipName,jdbcType=VARCHAR}, #{sex,jdbcType=TINYINT}, #{birthday,jdbcType=DATE},
    #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{memo,jdbcType=VARCHAR},
    #{status,jdbcType=TINYINT}, #{buyTimes,jdbcType=INTEGER}, #{sumConsume,jdbcType=DECIMAL},
    #{sumFeed,jdbcType=DECIMAL}, #{sumScore,jdbcType=DECIMAL}, #{remainingScore,jdbcType=DECIMAL},
    #{largessscore,jdbcType=DECIMAL}, #{overscore,jdbcType=DECIMAL}, #{vipStoreTotal,jdbcType=DECIMAL},
    #{vipStore,jdbcType=DECIMAL}, #{regDate,jdbcType=TIMESTAMP}, #{regSource,jdbcType=VARCHAR},
    #{createBy,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP}, #{lastUpdateBy,jdbcType=VARCHAR},
    #{lastUpdateAt,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=BIT}, #{position,jdbcType=VARCHAR},
    #{mainOpenid,jdbcType=VARCHAR}, #{version,jdbcType=BIGINT}, #{localId,jdbcType=BIGINT},#{passwordForTrading,jdbcType=VARCHAR},
    #{cardId,jdbcType=VARCHAR},#{userCardCode,jdbcType=VARCHAR},#{deposit,jdbcType=DECIMAL}
    )
  </insert>

  <insert id="insertVipImport" parameterType="map" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    insert into vip_import (id, tenant_id, branch_id,
    original_id, type_id, vip_code,
    vip_name, sex, birthday,
    phone, email, memo,
    status, buy_times, sum_consume,
    sum_feed, sum_score, remaining_score,
    largessscore, overscore, vip_store_total,
    vip_store, reg_date, reg_source,
    create_by, create_at, last_update_by,
    last_update_at, is_deleted, position,
    main_openid, version, local_id,password_for_trading,card_code,label_id
    )
    values (#{id,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT},
    #{originalId,jdbcType=VARCHAR}, #{typeId,jdbcType=BIGINT}, #{vipCode,jdbcType=VARCHAR},
    #{vipName,jdbcType=VARCHAR}, #{sex,jdbcType=TINYINT}, #{birthday,jdbcType=DATE},
    #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{memo,jdbcType=VARCHAR},
    #{status,jdbcType=TINYINT}, #{buyTimes,jdbcType=INTEGER}, #{sumConsume,jdbcType=DECIMAL},
    #{sumFeed,jdbcType=DECIMAL}, #{sumScore,jdbcType=DECIMAL}, #{remainingScore,jdbcType=DECIMAL},
    #{largessscore,jdbcType=DECIMAL}, #{overscore,jdbcType=DECIMAL}, #{vipStoreTotal,jdbcType=DECIMAL},
    #{vipStore,jdbcType=DECIMAL}, #{regDate,jdbcType=TIMESTAMP}, #{regSource,jdbcType=VARCHAR},
    #{createBy,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP}, #{lastUpdateBy,jdbcType=VARCHAR},
    #{lastUpdateAt,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=BIT}, #{position,jdbcType=VARCHAR},
    #{mainOpenid,jdbcType=VARCHAR}, #{version,jdbcType=BIGINT}, #{localId,jdbcType=BIGINT},#{passwordForTrading,jdbcType=VARCHAR},
    #{cardCode,jdbcType=VARCHAR},#{labelId,jdbcType=VARCHAR}
    )
  </insert>

  <insert id="importVipList" parameterType="map">
        insert into vip_import (id, tenant_id, branch_id,
        original_id, type_id, vip_code,
        vip_name, sex, birthday,
        phone, email, memo,
        status, buy_times, sum_consume,
        sum_feed, sum_score, remaining_score,
        largessscore, overscore, vip_store_total,
        vip_store, reg_date, reg_source,
        create_by, create_at, last_update_by,
        last_update_at, is_deleted, position,
        main_openid, version, local_id,password_for_trading,card_code,label_id
        )
        values
      <foreach item="vip" collection="vipsList" separator=",">
          (#{vip.id,jdbcType=BIGINT}, #{vip.tenantId,jdbcType=BIGINT}, #{vip.branchId,jdbcType=BIGINT},
          #{vip.originalId,jdbcType=VARCHAR}, #{vip.typeId,jdbcType=BIGINT}, #{vip.vipCode,jdbcType=VARCHAR},
          #{vip.vipName,jdbcType=VARCHAR}, #{vip.sex,jdbcType=TINYINT}, #{vip.birthday,jdbcType=DATE},
          #{vip.phone,jdbcType=VARCHAR}, #{vip.email,jdbcType=VARCHAR}, #{vip.memo,jdbcType=VARCHAR},
          #{vip.status,jdbcType=TINYINT}, #{vip.buyTimes,jdbcType=INTEGER}, #{vip.sumConsume,jdbcType=DECIMAL},
          #{vip.sumFeed,jdbcType=DECIMAL}, #{vip.sumScore,jdbcType=DECIMAL}, #{vip.remainingScore,jdbcType=DECIMAL},
          #{vip.largessscore,jdbcType=DECIMAL}, #{vip.overscore,jdbcType=DECIMAL}, #{vip.vipStoreTotal,jdbcType=DECIMAL},
          #{vip.vipStore,jdbcType=DECIMAL}, #{vip.regDate,jdbcType=TIMESTAMP}, #{vip.regSource,jdbcType=VARCHAR},
          #{vip.createBy,jdbcType=VARCHAR}, #{vip.createAt,jdbcType=TIMESTAMP}, #{vip.lastUpdateBy,jdbcType=VARCHAR},
          #{vip.lastUpdateAt,jdbcType=TIMESTAMP}, #{vip.isDeleted,jdbcType=BIT}, #{vip.position,jdbcType=VARCHAR},
          #{vip.mainOpenid,jdbcType=VARCHAR}, #{vip.version,jdbcType=BIGINT}, #{vip.localId,jdbcType=BIGINT},#{vip.passwordForTrading,jdbcType=VARCHAR},
          #{vip.cardCode,jdbcType=VARCHAR},#{vip.labelId,jdbcType=VARCHAR})
      </foreach>
  </insert>

  <update id="update" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    update vip
    <set >
      <if test="tenantId != null" >
        tenant_id = #{tenantId,jdbcType=BIGINT},
      </if>
      <if test="branchId != null" >
        branch_id = #{branchId,jdbcType=BIGINT},
      </if>
      <if test="originalId != null" >
        original_id = #{originalId,jdbcType=VARCHAR},
      </if>
      <if test="typeId != null" >
        type_id = #{typeId,jdbcType=BIGINT},
      </if>
      <if test="vipCode != null" >
        vip_code = #{vipCode,jdbcType=VARCHAR},
      </if>
      <if test="vipName != null" >
        vip_name = #{vipName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="birthday != null" >
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="memo != null" >
        memo = #{memo,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="buyTimes != null" >
        buy_times = #{buyTimes,jdbcType=INTEGER},
      </if>
      <if test="sumConsume != null" >
        sum_consume = #{sumConsume,jdbcType=DECIMAL},
      </if>
      <if test="sumFeed != null" >
        sum_feed = #{sumFeed,jdbcType=DECIMAL},
      </if>
      <if test="sumScore != null" >
        sum_score = #{sumScore,jdbcType=DECIMAL},
      </if>
      <if test="remainingScore != null" >
        remaining_score = #{remainingScore,jdbcType=DECIMAL},
      </if>
      <if test="largessscore != null" >
        largessscore = #{largessscore,jdbcType=DECIMAL},
      </if>
      <if test="overscore != null" >
        overscore = #{overscore,jdbcType=DECIMAL},
      </if>
      <if test="vipStoreTotal != null" >
        vip_store_total = #{vipStoreTotal,jdbcType=DECIMAL},
      </if>
      <if test="vipStore != null" >
        vip_store = #{vipStore,jdbcType=DECIMAL},
      </if>
      <if test="regDate != null" >
        reg_date = #{regDate,jdbcType=TIMESTAMP},
      </if>
      <if test="regSource != null" >
        reg_source = #{regSource,jdbcType=VARCHAR},
      </if>
      <if test="createBy != null" >
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createAt != null" >
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateBy != null" >
        last_update_by = #{lastUpdateBy,jdbcType=VARCHAR},
      </if>
      <if test="lastUpdateAt != null" >
        last_update_at = #{lastUpdateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null" >
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="position != null" >
        position = #{position,jdbcType=VARCHAR},
      </if>
      <if test="mainOpenid != null" >
        main_openid = #{mainOpenid,jdbcType=VARCHAR},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="localId != null" >
        local_id = #{localId,jdbcType=BIGINT},
      </if>
      <if test="passwordForTrading != null" >
        password_for_trading = #{passwordForTrading,jdbcType=VARCHAR},
      </if>
      <if test="cardCode != null" >
        card_code = #{cardCode,jdbcType=VARCHAR},
      </if>
      <if test="labelId != null">
        label_id = #{labelId, jdbcType=VARCHAR},
      </if>
      <if test="deposit != null">
        vip_deposit = #{deposit, jdbcType=DECIMAL},
      </if>
      <if test="aliUserId != null">
        ali_user_id = #{aliUserId, jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateImport" parameterType="map" >
    update vip_import
    <set >
      <if test="tenantId != null" >
        tenant_id = #{tenantId,jdbcType=BIGINT},
      </if>
      <if test="branchId != null" >
        branch_id = #{branchId,jdbcType=BIGINT},
      </if>
      <if test="isDeleted != null" >
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="select" parameterType="map" resultType="erp.chain.domain.o2o.Vip">
    select * from vip
    <where>
      is_deleted = 0
      <if test="tenantId != null">
        AND tenant_id = ${tenantId}
      </if>
      <if test="branchId != null">
        AND branch_id = #{branchId}
      </if>
      <if test="vipCode != null">
        AND vipCode = #{vip_code}
      </if>
      <if test="phone != null">
        AND phone = #{phone}
      </if>
      <if test="id != null">
        AND id = #{id}
      </if>
      <if test="typeId != null">
        AND type_id = #{typeId}
      </if>
      <if test="queryStr != null">
        AND phone = #{queryStr}
      </if>
      <if test="status != null and status != ''">
        AND status =#{status}
      </if>
      <if test="todayIsBirthday">
        AND birthday is not null AND substring(birthday, 6, 5)=#{todayIsBirthday}
      </if>
      <if test="groups != null and groups != ''">
        AND branch_id in (${groups})
      </if>
    </where>
  </select>
  <select id="selectVipImport" parameterType="map" resultType="erp.chain.domain.o2o.Vip">
    select * from vip_import
    <where>
      is_deleted = 0
      <if test="tenantId != null">
        AND tenant_id = ${tenantId}
      </if>
      <if test="branchId != null">
        AND branch_id = #{branchId}
      </if>
      <if test="vipCode != null">
        AND vipCode = #{vip_code}
      </if>
      <if test="phone != null">
        AND phone = #{phone}
      </if>
      <if test="id != null">
        AND id = #{id}
      </if>
      <if test="typeId != null">
        AND type_id = #{typeId}
      </if>
      <if test="queryStr != null">
        AND phone = #{queryStr}
      </if>
    </where>
  </select>
  <select id="queryVipNoPage" resultType="mapUnderscoreToCamelCase">
    select v.*, vt.type_name from vip v INNER JOIN vip_type vt ON vt.id = v.type_id
    AND v.tenant_id = vt.tenant_id
    <where>
      v.is_deleted = 0
      <if test="tenantId != null">
        AND v.tenant_id = ${tenantId}
      </if>
      <if test="branchId != null">
        AND v.branch_id = #{branchId}
      </if>
      <if test="vipCode != null">
        AND v.vip_code = #{vip_code}
      </if>
      <if test="phone != null">
        AND v.phone = #{phone}
      </if>
      <if test="id != null">
        AND v.id = #{id}
      </if>
      <if test="typeId != null">
        AND v.type_id = #{typeId}
      </if>
      <if test="queryStr != null">
        AND (v.phone = #{queryStr} OR v.vip_code=#{queryStr})
      </if>
      <if test="status != null and status != ''">
        AND v.status =#{status}
      </if>
    </where>
  </select>
  <select id="findById" parameterType="map" resultType="erp.chain.domain.o2o.Vip">
    select v.*,b.name branch_name from vip v inner join branch b on b.id=v.branch_id
    <where>
      v.is_deleted = 0 AND v.id = #{id}
      <if test="tenantId != null">
        AND v.tenant_id = ${tenantId}
      </if>
      <if test="status != null and status != ''">
        AND v.status =#{status}
      </if>
    </where>
  </select>
  <select id="findVoById" parameterType="map" resultType="erp.chain.domain.o2o.vo.VipVo">
    select v.*,b.name branch_name,vt.*, c.code vip_card_code,c.card_face_num from vip v
    INNER JOIN branch b on b.id=v.branch_id
    LEFT JOIN vip_type vt on v.type_id = vt.id
    LEFT JOIN card c ON v.id = c.holder_id AND v.tenant_id = c.tenant_id AND c.is_deleted = 0 AND c.type=4
    <where>
      v.is_deleted = 0 AND v.id = #{id}
      <if test="tenantId != null">
        AND v.tenant_id = ${tenantId}
      </if>
      <if test="status != null and status != ''">
        AND v.status =#{status}
      </if>
    </where>
    limit 1
  </select>
  <select id="findByCondition" resultType="erp.chain.domain.o2o.Vip">
    SELECT v.*,b.`name` branch_name FROM vip v
    INNER JOIN branch b ON v.branch_id=b.id
    WHERE b.is_deleted=0 AND v.is_deleted=0
    <if test="tenantId != null and tenantId != ''">
      AND v.tenant_id =${tenantId}
    </if>
    <if test="branchId != null and branchId != ''">
      AND v.branch_id =#{branchId}
    </if>
    <if test="originalId != null and originalId != ''">
      AND v.original_id =#{originalId}
    </if>
    <if test="id != null and id != ''">
      AND v.id =#{id}
    </if>
    <if test="status != null and status != ''">
      AND v.status =#{status}
    </if>
    <if test="vipCode != null and vipCode != ''">
      AND v.vip_code =#{vipCode}
    </if>
    <if test="phone != null and phone != ''">
      AND v.phone =#{phone}
    </if>
    <if test="queryStr != null and queryStr != ''">
      AND (v.vip_code like '%${queryStr}%' OR v.vip_name like '%${queryStr}%' OR v.phone like '%${queryStr}%')
    </if>
  </select>

  <select id="findVoByConditionSum" resultType="mapUnderscoreToCamelCase">
      SELECT count(*) total, SUM(t.vip_store) vip_store,SUM(t.vip_store_total) vip_store_total,SUM(t.remaining_score) remaining_score,SUM(t.sum_score) sum_score,SUM(t.sum_consume) sum_consume FROM (
      SELECT
      v.*,
      p.type_name,
      IFNULL(c.code, "") vip_card_code
      FROM vip v left join vip_type p on v.type_id=p.id
      LEFT JOIN card c
      ON c.holder_id = v.id
      <if test="isCoverDeleted == null or isCoverDeleted == '' or isCoverDeleted != true">
        AND c.is_deleted = 0
      </if>
      AND c.type = 4
      WHERE 1=1
      <if test="isCoverDeleted == null or isCoverDeleted == '' or isCoverDeleted != true">
        AND v.is_deleted = 0
      </if>
      <if test="tenantId != null and tenantId != ''">
        AND v.tenant_id =${tenantId}
      </if>
      <if test="branchId != null and branchId != ''">
        AND v.branch_id =#{branchId}
      </if>
      <if test="queryStr != null and queryStr != ''">
        AND (c.code like '%${queryStr}%' OR v.vip_code like '%${queryStr}%' OR v.vip_name like '%${queryStr}%' OR v.phone like '%${queryStr}%')
      </if>
      <if test="typeId != null and typeId != ''">
        AND v.type_id =#{typeId}
      </if>
      <if test="visitorStatus == 1">
        AND v.vip_name NOT LIKE '游客%'
      </if>
      <if test="status != null and status != ''">
        AND v.status =#{status}
      </if>
      <if test="createStart != null and createStart != ''">
        AND v.create_at >= #{createStart}
      </if>
      <if test="createEnd != null and createEnd != ''">
        AND #{createEnd} >= v.create_at
      </if>
      <if test="sumConsume1 != null and sumConsume1 != '' and sumConsume1Z == null">
        AND v.sum_consume >= #{sumConsume1}
      </if>
      <if test="sumConsume1 != null and sumConsume1 != '' and sumConsume1Z != null">
        AND (v.sum_consume >= #{sumConsume1} or v.sum_consume IS NULL )
      </if>
      <if test="sumConsume2 != null and sumConsume2 != '' and sumConsume1Z == null">
        AND #{sumConsume2} >= v.sum_consume
      </if>
      <if test="sumConsume2 != null and sumConsume2 != '' and sumConsume1Z != null">
        AND (#{sumConsume2} >= v.sum_consume OR v.sum_consume IS NULL )
      </if>
      <if test="vipStore1 != null and vipStore1 != '' and vipStore1Z == null">
        AND v.vip_store >= #{vipStore1}
      </if>
      <if test="vipStore1 != null and vipStore1 != '' and vipStore1Z != null">
        AND (v.vip_store >= #{vipStore1} OR v.vip_store IS NULL )
      </if>
      <if test="vipStore2 != null and vipStore2 != '' and vipStore1Z == null">
        AND #{vipStore2} >= v.vip_store
      </if>
      <if test="vipStore2 != null and vipStore2 != '' and vipStore1Z != null">
        AND (#{vipStore2} >= v.vip_store OR v.vip_store IS NULL )
      </if>
      <if test="remainingScore1 != null and remainingScore1 != '' and remainingScore1Z == null">
        AND v.remaining_score >= #{remainingScore1}
      </if>
      <if test="remainingScore1 != null and remainingScore1 != '' and remainingScore1Z != null">
        AND (v.remaining_score >= #{remainingScore1} OR v.remaining_score IS NULL )
      </if>
      <if test="remainingScore2 != null and remainingScore2 != '' and remainingScore1Z == null">
        AND #{remainingScore2} >= v.remaining_score
      </if>
      <if test="remainingScore2 != null and remainingScore2 != '' and remainingScore1Z != null">
        AND (#{remainingScore2} >= v.remaining_score OR v.remaining_score IS NULL )
      </if>
      <if test="sex != null and sex != '' and sex != 0">
        AND v.sex =#{sex}
      </if>
      <if test="groups != null and groups != ''">
        AND v.branch_id in (${groups})
      </if>
      <if test="labelId != null and labelId != ''">
        AND (v.label_id LIKE '${labelId}' OR v.label_id LIKE '${labelId},%' OR v.label_id LIKE '%,${labelId},%' OR v.label_id LIKE '%,${labelId}')
      </if>
      <if test="phone != null and phone != ''">
        AND v.phone LIKE '%${phone}%'
      </if>
      group by v.id
      ) t
  </select>

  <select id="findVoByCondition" resultType="erp.chain.domain.o2o.vo.VipVo">
    SELECT
    v.*,
    p.type_name,
    IFNULL(c.code, "") vip_card_code,
    IFNULL(c.card_face_num, "") cardFaceNum
    FROM vip v
    left join vip_type p on v.type_id=p.id
    LEFT JOIN card c ON c.holder_id = v.id
    <if test="isCoverDeleted == null or isCoverDeleted == '' or isCoverDeleted != true">
      AND c.is_deleted = 0
    </if>
    AND c.type = 4
    WHERE 1=1
    <if test="isCoverDeleted == null or isCoverDeleted == '' or isCoverDeleted != true">
      AND v.is_deleted = 0
    </if>
    <if test="tenantId != null and tenantId != ''">
      AND v.tenant_id =${tenantId}
    </if>
    <if test="branchId != null and branchId != ''">
      AND v.branch_id =#{branchId}
    </if>
    <if test="queryStr != null and queryStr != ''">
      AND (c.card_face_num like '%${queryStr}%' OR c.code like '%${queryStr}%' OR v.vip_code like '%${queryStr}%' OR v.vip_name like '%${queryStr}%' OR v.phone like '%${queryStr}%')
    </if>
    <if test="typeId != null and typeId != ''">
      AND v.type_id =#{typeId}
    </if>
    <if test="visitorStatus == 1">
      AND v.vip_name NOT LIKE '游客%'
    </if>
    <if test="status != null and status != ''">
      AND v.status =#{status}
    </if>
    <if test="createStart != null and createStart != ''">
      AND v.create_at >= #{createStart}
    </if>
    <if test="createEnd != null and createEnd != ''">
      AND #{createEnd} >= v.create_at
    </if>
    <if test="sumConsume1 != null and sumConsume1 != '' and sumConsume1Z == null">
      AND v.sum_consume >= #{sumConsume1}
    </if>
    <if test="sumConsume1 != null and sumConsume1 != '' and sumConsume1Z != null">
      AND (v.sum_consume >= #{sumConsume1} or v.sum_consume IS NULL )
    </if>
    <if test="sumConsume2 != null and sumConsume2 != '' and sumConsume1Z == null">
      AND #{sumConsume2} >= v.sum_consume
    </if>
    <if test="sumConsume2 != null and sumConsume2 != '' and sumConsume1Z != null">
      AND (#{sumConsume2} >= v.sum_consume OR v.sum_consume IS NULL )
    </if>
    <if test="vipStore1 != null and vipStore1 != '' and vipStore1Z == null">
      AND v.vip_store >= #{vipStore1}
    </if>
    <if test="vipStore1 != null and vipStore1 != '' and vipStore1Z != null">
      AND (v.vip_store >= #{vipStore1} OR v.vip_store IS NULL )
    </if>
    <if test="vipStore2 != null and vipStore2 != '' and vipStore1Z == null">
      AND #{vipStore2} >= v.vip_store
    </if>
    <if test="vipStore2 != null and vipStore2 != '' and vipStore1Z != null">
      AND (#{vipStore2} >= v.vip_store OR v.vip_store IS NULL )
    </if>
    <if test="remainingScore1 != null and remainingScore1 != '' and remainingScore1Z == null">
      AND v.remaining_score >= #{remainingScore1}
    </if>
    <if test="remainingScore1 != null and remainingScore1 != '' and remainingScore1Z != null">
      AND (v.remaining_score >= #{remainingScore1} OR v.remaining_score IS NULL )
    </if>
    <if test="remainingScore2 != null and remainingScore2 != '' and remainingScore1Z == null">
      AND #{remainingScore2} >= v.remaining_score
    </if>
    <if test="remainingScore2 != null and remainingScore2 != '' and remainingScore1Z != null">
      AND (#{remainingScore2} >= v.remaining_score OR v.remaining_score IS NULL )
    </if>
    <if test="sex != null and sex != '' and sex != 0">
      AND v.sex =#{sex}
    </if>
    <if test="groups != null and groups != ''">
      AND v.branch_id in (${groups})
    </if>
    <if test="labelId != null and labelId != ''">
      AND (v.label_id LIKE '${labelId}' OR v.label_id LIKE '${labelId},%' OR v.label_id LIKE '%,${labelId},%' OR v.label_id LIKE '%,${labelId}')
    </if>
    <if test="phone != null and phone != ''">
      AND v.phone LIKE '%${phone}%'
    </if>
    group by v.id
    <if test="offset != null and rows!= null" >
      LIMIT ${offset},${rows}
    </if>
  </select>
  <select id="findImportVoByCondition" resultType="erp.chain.domain.o2o.vo.VipVo">
    SELECT
    v.*,
    p.type_name,
    v.card_code vip_card_code, 0 times_card_count, 0 card_coupons_count
    FROM vip_import v left join vip_type p on v.type_id=p.id
    LEFT JOIN card c
    ON c.holder_id = v.id
    AND c.is_deleted = 0
    AND c.type = 4
    WHERE 1=1 AND v.is_deleted = 0
    <if test="tenantId != null and tenantId != ''">
      AND v.tenant_id =${tenantId}
    </if>
    <if test="branchId != null and branchId != ''">
      AND v.branch_id =#{branchId}
    </if>
    <if test="queryStr != null and queryStr != ''">
      AND (c.code like '%${queryStr}%' OR v.vip_code like '%${queryStr}%' OR v.vip_name like '%${queryStr}%' OR v.phone like '%${queryStr}%')
    </if>
    <if test="typeId != null and typeId != ''">
      AND v.type_id =#{typeId}
    </if>
    <if test="visitorStatus == 1">
      AND v.vip_name NOT LIKE '游客%'
    </if>
    <if test="status != null and status != ''">
      AND v.status =#{status}
    </if>
    <if test="groups != null and groups != ''">
      AND v.branch_id in (${groups})
    </if>
    group by v.id
    <if test="offset != null and rows!= null" >
      LIMIT ${offset},${rows}
    </if>
  </select>
    <select id="findImportVoByConditionSum" resultType="mapUnderscoreToCamelCase">
        SELECT
        SUM(IFNULL(v.vip_store,0)) vip_store, SUM(IFNULL(v.vip_store_total,0)) vip_store_total, SUM(IFNULL(v.remaining_score,0)) remaining_score,
        SUM(IFNULL(v.sum_score,0)) sum_score, SUM(IFNULL(v.sum_consume,0)) sum_consume
        FROM vip_import v left join vip_type p on v.type_id=p.id
        LEFT JOIN card c
        ON c.holder_id = v.id
        AND c.is_deleted = 0
        AND c.type = 4
        WHERE 1=1 AND v.is_deleted = 0
        <if test="tenantId != null and tenantId != ''">
            AND v.tenant_id =${tenantId}
        </if>
        <if test="branchId != null and branchId != ''">
            AND v.branch_id =#{branchId}
        </if>
        <if test="typeId != null and typeId != ''">
            AND v.type_id =#{typeId}
        </if>
        <if test="visitorStatus == 1">
            AND v.vip_name NOT LIKE '游客%'
        </if>
        <if test="status != null and status != ''">
            AND v.status =#{status}
        </if>
        <if test="groups != null and groups != ''">
            AND v.branch_id in (${groups})
        </if>
        <if test="queryStr != null and queryStr != ''">
            AND (c.code like '%${queryStr}%' OR v.vip_code like '%${queryStr}%' OR v.vip_name like '%${queryStr}%' OR v.phone like '%${queryStr}%')
        </if>
    </select>
  <select id="listVipTrade" resultType="mapUnderscoreToCamelCase">
    SELECT vth.*,v.*,vt.*,b.name t_branch_name FROM vip_trade_history vth
    INNER JOIN branch b ON b.id=vth.trade_branch_id
    LEFT JOIN vip v on vth.vip_id=v.id left join vip_type vt on v.type_id = vt.id WHERE 1=1 AND vth.is_deleted = 0
    <if test="tenantId != null and tenantId != ''">
      AND v.tenant_id =${tenantId}
    </if>
    <if test="branchId != null and branchId != ''">
      AND vth.trade_branch_id IN (${branchId})
    </if>
    <if test="vipTypeName != null and vipTypeName != ''">
      AND vt.type_name =#{vipTypeName}
    </if>
    <if test="orderResource == 0">
      AND vth.trade_no NOT LIKE 'XF%' AND vth.trade_no NOT LIKE 'WX%'
    </if>
    <if test="orderResource == 1">
      AND (vth.trade_no LIKE 'XF%' OR vth.trade_no LIKE 'WX%')
    </if>
    <if test="queryStr != null and queryStr != ''">
      AND (v.vip_code like '%${queryStr}%' OR v.vip_name like '%${queryStr}%' OR v.phone like '%${queryStr}%')
    </if>
    <if test="vipId != null and vipId != ''">
      AND vth.vip_id =#{vipId}
    </if>
    <if test="startDate != null and startDate != ''">
      AND (vth.create_at >= #{startDate})
    </if>
    <if test="endDate != null and endDate != ''">
      <![CDATA[
      AND (vth.create_at <= #{endDate})
      ]]>
    </if>
    <if test="offset != null and rows!=''" >
      LIMIT ${offset},${rows}
    </if>
  </select>
  <select id="listVipStore" resultType="mapUnderscoreToCamelCase">
    SELECT c.code card_code,vsh.id, vsh.store_code, v.vip_name,v.vip_code, v.phone,IFNULL(v.vip_store,0)vip_store, vt.type_name, vsh.create_at, vsh.store_type,
    IFNULL(vsh.pay_amount, 0) pay_amount, IFNULL(vsh.gift_amount, 0) gift_amount, b.`name` branch_name, vsh.create_by, vsh.store_from, vsh.vip_oper_store,
    vsh.store_branch_id, vsh.correct_flag, vsh.pay_type,vsh.vip_id,vsh.last_update_at,vsh.last_update_by,vsh.payment_id,vsh.token,
    IFNULL(v.vip_store,0) vip_store, vt.*, b.* FROM vip_store_history vsh
    LEFT JOIN vip v on vsh.vip_id=v.id
    LEFT JOIN card c ON c.tenant_id=v.tenant_id AND c.holder_id=v.id AND c.type=4 AND c.is_deleted=0
    LEFT join vip_type vt on v.type_id = vt.id
    LEFT JOIN branch b ON b.id = vsh.store_branch_id
    WHERE 1=1 AND vsh.is_deleted = 0
    <if test="tenantId != null and tenantId != ''">
      AND v.tenant_id =${tenantId}
    </if>
    <if test="branchId != null and branchId != ''">
      AND vsh.store_branch_id IN (${branchId})
    </if>
    <if test="vipTypeName != null and vipTypeName != ''">
      AND vt.type_name =#{vipTypeName}
    </if>
    <if test="queryStr != null and queryStr != ''">
      AND (v.vip_code like '%${queryStr}%' OR v.vip_name like '%${queryStr}%' OR v.phone like '%${queryStr}%' OR c.code like '%${queryStr}%')
    </if>
    <if test="id != null and id != ''">
      AND vsh.id =#{id}
    </if>
    <if test="vipId != null and vipId != ''">
      AND vsh.vip_id =#{vipId}
    </if>
    <if test="ruleDetailId != null and ruleDetailId != ''">
      AND vsh.rule_detail_id =#{ruleDetailId}
    </if>
    <if test="startDate != null and startDate != ''">
      AND (vsh.create_at >= #{startDate})
    </if>
    <if test="endDate != null and endDate != ''">
      <![CDATA[
      AND (vsh.create_at <= #{endDate})
      ]]>
    </if>
    <if test="paymentType != null and paymentType != ''">
      AND vsh.pay_type = #{paymentType}
    </if>
    <if test="storeFrom != null and storeFrom != ''">
      AND vsh.store_from = #{storeFrom}
    </if>
    <if test="newData != 'true'">
      <if test="storeType != null and storeType != ''">
        AND vsh.store_type != #{storeType}
      </if>
    </if>
    <if test="newData == 'true'">
      <if test="storeType != null and storeType != ''">
        AND vsh.store_type = #{storeType}
      </if>
      ORDER BY vsh.create_at DESC
    </if>
    <if test="offset != null and rows!=''">
      LIMIT ${offset},${rows}
    </if>
  </select>
  <select id="findByFhoneOrCode" resultType="VipVo">
    SELECT v.id,v.tenant_id,v.branch_id,v.original_id,v.type_id,v.vip_code,v.vip_name,v.sex,v.birthday,v.phone,v.email,v.memo,v.status,v.buy_times,v.sum_consume,v.sum_feed,
      v.sum_score,v.remaining_score,v.largessscore,v.overscore,v.vip_store_total,v.vip_store,v.reg_date,v.reg_source,v.create_by,v.create_at,v.last_update_by,v.last_update_at,
      v.is_deleted,v.position,v.main_openid,v.version,v.local_id,v.password_for_trading,v.card_code,v.expiry_date,v.card_id,v.user_card_code,v.label_id,v.vip_deposit,v.ali_user_id,
      vt.type_code,vt.type_name,vt.preferential_policy,vt.points_factor,vt.score_usage,vt.mem_price_used,IFNULL(bd.discount_rate, vt.discount_rate) discount_rate,vt.to_save_points,vt.is_package_disc,vt.is_promotion_disc,
      vt.is_online_default,vt.allow_refund,vt.deposit,vt.auto_upgrade,vt.curr_level,vt.upgrade_limit,vt.score_type,vt.upgrade_type
    FROM vip v
    LEFT JOIN vip_type vt on v.type_id = vt.id
    LEFT JOIN branch_discount bd ON v.tenant_id = bd.tenant_id AND v.type_id = bd.type_id AND bd.is_deleted=0
    <if test="qryBranchId != null and qryBranchId != ''">
      AND bd.branch_id =#{qryBranchId}
    </if>
    where v.is_deleted = 0
    <if test="tenantId != null and tenantId != ''">
      AND v.tenant_id =${tenantId}
    </if>
    <if test="branchId != null and branchId != ''">
      AND v.branch_id =#{branchId}
    </if>
    <if test="groups != null and groups != ''">
      AND v.branch_id in (${groups})
    </if>
    <if test="status != null and status != ''">
      AND v.status =#{status}
    </if>
    <if test="vipCode != null and vipCode != '' and phone != null and phone != ''">
      AND (v.vip_code = #{vipCode} OR v.phone = #{phone})
    </if>
  </select>
  <select id="findAllByVipIdAndCode" resultType="erp.chain.domain.o2o.WxPosCode">
    SELECT * FROM  wx_pos_code WHERE vip_id=#{vipId} AND code=#{code} AND is_deleted=0
  </select>

  <select id="findByIdAndTenantIdAndBranchId" resultType="erp.chain.domain.o2o.Vip">
    SELECT * FROM vip WHERE id = #{id} AND tenant_id = ${tenantId} AND branch_id = #{branchId} AND is_deleted = 0
  </select>

  <!--查询会员标签列表-->
  <select id="queryLabelList" resultType="mapUnderscoreToCamelCase">
    SELECT l.*, g.group_name FROM vip_label l
    INNER JOIN label_group g ON l.group_id = g.id
    WHERE l.tenant_id = ${tenantId} AND l.is_deleted = 0
    <!--<if test="onlySelf == 0">
        AND (l.branch_id = ${branchId} OR l.branch_id = (SELECT id FROM branch WHERE tenant_id = ${tenantId} AND branch_type = 0))
    </if>
    <if test="onlySelf == 1">
        AND l.branch_id = ${branchId}
    </if>-->
    <if test="groupId != null and groupId != ''">
      AND l.group_id = ${groupId}
    </if>
    <if test="labelName != null and labelName != ''">
      AND l.label_name LIKE '%${labelName}%'
    </if>
    <if test="labelNameOrCode != null and labelNameOrCode != ''">
      AND (l.label_name LIKE '%${labelNameOrCode}%' OR  l.label_code LIKE '%${labelNameOrCode}%')
    </if>
    <if test="offset != null and rows != null">
      LIMIT ${offset},${rows}
    </if>
  </select>

  <select id="queryLabelSum" resultType="java.lang.Long">
    SELECT count(1) FROM vip_label WHERE tenant_id = ${tenantId} AND is_deleted = 0
    <!--<if test="onlySelf == 0">
        AND (branch_id = ${branchId} OR branch_id = (SELECT id FROM branch WHERE tenant_id = ${tenantId} AND branch_type = 0))
    </if>
    <if test="onlySelf == 1">
        AND branch_id = ${branchId}
    </if>-->
    <if test="groupId != null and groupId != ''">
      AND group_id = ${groupId}
    </if>
    <if test="labelName != null and labelName != ''">
      AND label_name LIKE '%${labelName}%'
    </if>
    <if test="labelNameOrCode != null and labelNameOrCode != ''">
        AND (label_name LIKE '%${labelNameOrCode}%' OR  label_code LIKE '%${labelNameOrCode}%')
    </if>
  </select>
  <select id="getLabelCode" resultType="String">
    SELECT max(label_code) FROM vip_label WHERE tenant_id = ${tenantId} AND group_id = #{groupId} AND is_deleted = 0
  </select>
  <select id="isLabelNameUsed" resultType="java.lang.Long">
    SELECT count(1) FROM vip_label WHERE label_name = #{labelName} AND tenant_id = ${tenantId} AND is_deleted = 0
  </select>
  <insert id="addLabel" parameterType="map" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO vip_label (label_code, label_name, tenant_id, branch_id, group_id, create_at, create_by, last_update_at, last_update_by, is_deleted)
    VALUES (#{labelCode,jdbcType=VARCHAR}, #{labelName,jdbcType=VARCHAR}, #{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT}, #{groupId,jdbcType=BIGINT},
    #{createAt,jdbcType=TIMESTAMP},#{createBy,jdbcType=VARCHAR}, #{lastUpdateAt,jdbcType=TIMESTAMP},#{lastUpdateBy,jdbcType=VARCHAR}, #{isDeleted,jdbcType=BIT})
  </insert>
  <update id="delLabel" parameterType="map">
    UPDATE vip_label
    <set>
        <if test="lastUpdateAt != null">
          last_update_at = #{lastUpdateAt, jdbcType=TIMESTAMP},
        </if>
        <if test="lastUpdateBy != null">
          last_update_by = #{lastUpdateBy, jdbcType=VARCHAR},
        </if>
      is_deleted = 1,
    </set>
    WHERE id = #{id,jdbcType=BIGINT} AND tenant_id = #{tenantId,jdbcType=BIGINT}
  </update>
  <select id="findLabelById" resultType="erp.chain.domain.o2o.VipLabel">
    SELECT * FROM vip_label WHERE id = #{id} AND tenant_id = ${tenantId} AND is_deleted = 0
  </select>
  <!--查询标签是否被使用-->
  <select id="labelIsUsed" resultType="String">
    SELECT GROUP_CONCAT(label_id SEPARATOR ',') FROM vip WHERE tenant_id = ${tenantId} AND branch_id = #{branchId} AND is_deleted = 0
  </select>
  <select id="useLabelVip" resultType="mapUnderscoreToCamelCase">
    SELECT v.id, v.label_id FROM vip v WHERE (v.label_id LIKE '%,${id},%' OR v.label_id LIKE '${id},%' OR v.label_id LIKE '%,${id}')
    AND v.tenant_id = ${tenantId} AND v.branch_id = #{branchId} AND v.is_deleted = 0
  </select>
  <select id="queryNamesByIds" resultType="String">
    SELECT GROUP_CONCAT(label_name SEPARATOR ',' ) FROM vip_label WHERE id IN (${ids}) AND tenant_id = ${tenantId} AND is_deleted = 0
  </select>
  <select id="queryLabelAndGroup" resultType="mapUnderscoreToCamelCase">
    SELECT * FROM(
    SELECT GROUP_CONCAT(l.id SEPARATOR ',') label_id, GROUP_CONCAT(l.label_name SEPARATOR ',') label_name, lg.id group_id, lg.group_name FROM label_group lg
    LEFT JOIN vip_label l ON lg.id = l.group_id  AND l.is_deleted = 0
    WHERE lg.tenant_id = ${tenantId} AND lg.is_deleted = 0 GROUP BY l.group_id
    UNION
    SELECT null,null,lg.id group_id, lg.group_name FROM label_group lg WHERE lg.tenant_id = ${tenantId} AND lg.is_deleted = 0
    ) t GROUP BY t.group_id
  </select>
  <!--查询会员标签组-->
  <select id="queryLabelGroup" resultType="mapUnderscoreToCamelCase">
    SELECT * FROM label_group WHERE tenant_id = ${tenantId}
    <!--<if test="onlySelf == 0">
      AND (branch_id = ${branchId} OR branch_id = (SELECT b.id FROM branch b WHERE b.tenant_id = ${tenantId} AND b.branch_type = 0))
    </if>
    <if test="onlySelf == 1">
      AND branch_id = ${branchId}
    </if>-->
    AND is_deleted = 0
  </select>

  <!--查询会员标签组表格-->
  <select id="queryLabelGroupTable" resultType="mapUnderscoreToCamelCase">
    SELECT * FROM label_group WHERE  tenant_id = ${tenantId} AND is_deleted = 0
    <!--<if test="onlySelf == 0">
        AND (branch_id = ${branchId} OR branch_id = (SELECT b.id FROM branch b WHERE b.tenant_id = ${tenantId} AND b.branch_type = 0))
    </if>
    <if test="onlySelf == 1">
        AND branch_id = ${branchId}
    </if>-->
    <if test="labelGroupCodeOrName != null and labelGroupCodeOrName != ''">
      AND (group_code LIKE '%${labelGroupCodeOrName}%' OR group_name LIKE '%${labelGroupCodeOrName}%')
    </if>
    <if test="rows != null and offset != null">
      LIMIT ${offset}, ${rows}
    </if>
  </select>
  <select id="queryLabelGroupTree" resultType="mapUnderscoreToCamelCase">
    SELECT * FROM label_group WHERE  tenant_id = ${tenantId} AND is_deleted = 0
    <if test="onlySelf == 1">
      AND branch_id = ${branchId}
    </if>
  </select>
  <select id="queryLabelGroupSum" resultType="java.lang.Long">
    SELECT count(1) FROM label_group WHERE tenant_id = ${tenantId} AND is_deleted = 0
    <!--<if test="onlySelf == 0">
        AND (branch_id = ${branchId} OR branch_id = (SELECT b.id FROM branch b WHERE b.tenant_id = ${tenantId} AND b.branch_type = 0))
    </if>
    <if test="onlySelf == 1">
        AND branch_id = ${branchId}
    </if>-->
    <if test="labelGroupCodeOrName != null and labelGroupCodeOrName !=''">
      AND (group_name LIKE '%${labelGroupCodeOrName}%' OR group_code LIKE '%labelGroupCodeOrName%')
    </if>
  </select>
  <select id="isGroupNameUsed" resultType="java.lang.Long">
    SELECT count(1) FROM label_group WHERE group_name = #{groupName} AND tenant_id = ${tenantId} AND branch_id = #{branchId} AND is_deleted = 0
  </select>
  <insert id="addLabelGroup" parameterType="map" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO label_group (group_code, group_name, tenant_id, branch_id, create_at, create_by, last_update_at, last_update_by, is_deleted)
    VALUES (#{groupCode,jdbcType=VARCHAR}, #{groupName, jdbcType=VARCHAR}, #{tenantId, jdbcType=BIGINT}, #{branchId, jdbcType=BIGINT}, #{createAt,jdbcType=TIMESTAMP},
    #{createBy, jdbcType=VARCHAR}, #{lastUpdateAt, jdbcType=TIMESTAMP}, #{lastUpdateBy, jdbcType=VARCHAR}, #{isDeleted, jdbcType=BIT})
  </insert>
  <update id="updateLabelGroup" parameterType="map">
    UPDATE label_group
    <set>
      <if test="groupName!= null">
        group_name = #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="lastUpdateAt != null">
        last_update_at = #{lastUpdateAt, jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateBy != null">
        last_update_by = #{lastUpdateBy, jdbcType=VARCHAR},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted, jdbcType=BIT},
      </if>
    </set>
    WHERE id = #{id,jdbcType=BIGINT} AND tenant_id = #{tenantId,jdbcType=BIGINT}
  </update>
  <select id="findLabelGroupById" resultType="erp.chain.domain.o2o.LabelGroup">
    SELECT * FROM label_group WHERE id = #{id} AND tenant_id = ${tenantId} AND is_deleted = 0
  </select>
  <select id="queryLabelByGroupId" resultType="java.lang.Long">
    SELECT count(1) FROM vip_label WHERE group_id = #{groupId} AND tenant_id = ${tenantId} AND is_deleted = 0
  </select>
  <select id="getGroupCode" resultType="String">
    SELECT MAX(group_code) FROM label_group WHERE tenant_id=${tenantId} AND is_deleted=0
  </select>
  <update id="updateVipLabel" parameterType="map">
    UPDATE vip SET label_id = '${labelId}' WHERE id = ${id} AND tenant_id = ${tenantId} AND is_deleted = 0
  </update>
  <select id="minGroupId" resultType="String">
    SELECT MIN(id) FROM label_group WHERE tenant_id=${tenantId} AND is_deleted=0
    <!--<if test="onlySelf == 0">
      AND (branch_id = ${branchId} OR branch_id = (SELECT id FROM branch WHERE tenant_id = ${tenantId} AND branch_type = 0))
    </if>
    <if test="onlySelf == 1">
      AND branch_id = ${branchId}
    </if>-->
  </select>
  <select id="labelCount" resultType="java.lang.Integer">
    SELECT COUNT(DISTINCT(group_id)) FROM vip_label WHERE id IN (${labelId})
  </select>



    <select id="find" parameterType="erp.chain.utils.SearchModel" resultType="erp.chain.domain.o2o.Vip">
        SELECT * FROM vip <include refid="erp.chain.mapper.UniversalMapper.searchConditionSql"></include>
    </select>

    <select id="findAll" parameterType="erp.chain.utils.SearchModel" resultType="erp.chain.domain.o2o.Vip">
        SELECT * FROM vip <include refid="erp.chain.mapper.UniversalMapper.searchConditionSql"></include>
    </select>

  <select id="miyaVipFind" resultType="mapUnderscoreToCamelCase">
    SELECT v.*,c.code vip_card_code,vt.type_name FROM vip v
    INNER JOIN vip_type vt
    ON vt.tenant_id=v.tenant_id
    AND vt.id=v.type_id
    LEFT JOIN card c ON
    v.tenant_id=c.tenant_id
    AND c.type=4
    AND c.holder_id=v.id
    AND c.is_deleted=0
    WHERE v.tenant_id=#{tenantId}
    AND v.is_deleted=0
    AND v.phone='${mobile}'
  </select>
  <select id="miyaVipFindOne" resultType="mapUnderscoreToCamelCase">
    SELECT v.*,c.code vip_card_code,vt.type_name FROM vip v
    INNER JOIN vip_type vt
    ON vt.tenant_id=v.tenant_id
    AND vt.id=v.type_id
    LEFT JOIN card c ON
    v.tenant_id=c.tenant_id
    AND c.type=4
    AND c.holder_id=v.id
    AND c.is_deleted=0
    WHERE v.tenant_id=#{tenantId}
    AND v.is_deleted=0
    AND v.id=#{vipId}
  </select>
    <select id="queryRegisteredPhone" resultType="java.lang.String">
      SELECT v.phone FROM vip v
      WHERE v.tenant_id = #{tenantId}
      AND v.is_deleted = 0
      AND v.phone IS NOT NULL
      AND v.phone &lt;&gt; ''
      <if test="branchId != null">
        AND v.branch_id = #{branchId}
      </if>
      <if test="groups != null and groups != ''">
        AND v.branch_id in (${groups})
      </if>

    </select>
    <select id="queryImportedPhone" resultType="java.lang.String">
      SELECT vi.phone
      FROM vip_import vi
      WHERE vi.tenant_id = #{tenantId}
      AND vi.is_deleted = 0
      AND vi.phone IS NOT NULL
      AND vi.phone &lt;&gt; ''
      <if test="branchId != null">
        AND vi.branch_id = #{branchId}
      </if>
      <if test="groups != null and groups != ''">
        AND vi.branch_id in (${groups})
      </if>
    </select>

  <select id="queryRegisteredCardCode" resultType="java.lang.String">
    SELECT
    DISTINCT(M. CODE)
    FROM
    (
    SELECT
    `code`
    FROM
    card
    WHERE
    tenant_id = #{tenantId}
    <if test="branchId != null">
      AND branch_id = #{branchId}
    </if>
    <if test="groups != null">
      AND branch_id in (${groups})
    </if>
    AND is_deleted = 0
    AND `type` = 4
    AND CODE IS NOT NULL
    AND CODE &lt;&gt; ''
    UNION ALL
    SELECT
    `card_face_num` AS 'code'
    FROM
    card
    WHERE
    tenant_id = #{tenantId}
    <if test="branchId != null">
      AND branch_id = #{branchId}
    </if>
    <if test="groups != null">
      AND branch_id in (${groups})
    </if>
    AND is_deleted = 0
    AND `type` = 4
    AND card_face_num IS NOT NULL
    AND card_face_num &lt;&gt; ''
    AND CODE &lt;&gt; card_face_num
    ) M
  </select>
  <select id="queryImportedCardCode" resultType="java.lang.String">
    SELECT vi.card_code
    FROM vip_import vi
    WHERE vi.tenant_id = #{tenantId}
    AND vi.is_deleted = 0
    AND vi.card_code IS NOT NULL
    AND vi.card_code &lt;&gt; ''
    <if test="branchId != null">
      AND vi.branch_id = #{branchId}
    </if>
    <if test="groups != null and groups != ''">
      AND vi.branch_id in (${groups})
    </if>
  </select>

    <!--查询会员对账表中是否有记录-->
    <select id="isInVipStatement" resultType="mapUnderscoreToCamelCase">
        SELECT * FROM vip_statement vs WHERE vs.tenant_id = #{tenantId} AND vs.branch_id = #{branchId} AND vs.vip_id = #{vipId} AND vs.is_deleted = 0
        ORDER BY vs.create_at DESC
    </select>
    <!--查询会员今日储值-->
    <select id="queryVipStoreAmount" resultType="java.math.BigDecimal">
        SELECT SUM(IFNULL(IF(vsh.store_type=2,-vsh.pay_amount,vsh.pay_amount),0)) store_amount FROM vip_store_history vsh WHERE vsh.tenant_id = #{tenantId} AND vsh.vip_id = #{vipId}
        AND (vsh.store_type = 1 OR vsh.store_type = 2) AND vsh.is_deleted = 0 AND vsh.create_at LIKE '${statementDate}%'
    </select>
    <!--查询会员今日消费-->
    <select id="queryVipPayAmount" resultType="java.math.BigDecimal">
        SELECT SUM(IFNULL(IF(s.is_refund = 1,-s.received_amount, s.received_amount),0)) pay_amount FROM sale s WHERE s.tenant_id = #{tenantId} AND s.vip_id = #{vipId}
        AND s.is_deleted = 0 AND s.create_at LIKE '${statementDate}%'
    </select>
    <!--查询会员今日取款-->
    <select id="queryVipDrawAmount" resultType="java.math.BigDecimal">
        SELECT SUM(IFNULL(vsh.pay_amount,0)) FROM vip_store_history vsh WHERE vsh.tenant_id = #{tenantId} AND vsh.vip_id = #{vipId} AND vsh.store_type = 5
        AND vsh.is_deleted = 0 AND vsh.create_at LIKE '${statementDate}%'
    </select>
    <!--插入会员对账记录-->
    <insert id="insertVipStatement" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO vip_statement (tenant_id, branch_id, vip_id, type_id, begin_amount, store_amount, pay_amount, draw_amount, end_amount, reconciliation_date,
        create_at, create_by, last_update_at, last_update_by, is_deleted)
        VALUES (#{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT}, #{vipId,jdbcType=BIGINT}, #{typeId,jdbcType=BIGINT}, #{beginAmount,jdbcType=DECIMAL},
        #{storeAmount,jdbcType=DECIMAL}, #{payAmount,jdbcType=DECIMAL}, #{drawAmount,jdbcType=DECIMAL}, #{endAmount,jdbcType=DECIMAL}, #{reconciliationDate,jdbcType=TIMESTAMP},
        #{createAt,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, #{lastUpdateAt,jdbcType=TIMESTAMP}, #{lastUpdateBy,jdbcType=VARCHAR}, #{isDeleted,jdbcType=BIT})
    </insert>

    <select id="selectVipIncludeDeleted" parameterType="map" resultType="erp.chain.domain.o2o.Vip">
        SELECT * FROM vip WHERE tenant_id = #{tenantId} AND is_deleted = 0
        UNION
        SELECT * FROM vip WHERE tenant_id = #{tenantId} AND is_deleted = 1 AND id IN
        (
         SELECT vsh.vip_id FROM vip_store_history vsh WHERE tenant_id = #{tenantId} AND is_deleted = 0 AND create_at LIKE '${statementDate}%'
        )
    </select>

    <select id="queryVipForBS" resultType="mapUnderscoreToCamelCase">
        SELECT v.id,IFNULL(v.vip_store,0) vip_store, IFNULL(v.remaining_score,0) remaining_score FROM vip v
        LEFT JOIN card c ON v.tenant_id = c.tenant_id AND v.id = c.holder_id
        WHERE v.tenant_id = #{tenantId} AND v.is_deleted = 0
        <if test="branchId != null">
            AND v.branch_id = #{branchId}
        </if>
        <if test="cardCode != null">
            AND (c.code = #{cardCode} OR c.card_face_num = #{cardCode} OR v.vip_code = #{cardCode} OR v.phone = #{cardCode})
        </if>
    </select>

    <select id="queryVipStoreForBS" resultType="mapUnderscoreToCamelCase">
        SELECT v.vip_name,vsh.* FROM vip_store_history vsh
        LEFT JOIN vip v ON vsh.tenant_id = v.tenant_id AND vsh.vip_id = v.id
        LEFT JOIN card c ON vsh.tenant_id = c.tenant_id AND vsh.vip_id = c.holder_id
        WHERE vsh.tenant_id = #{tenantId} AND vsh.is_deleted = 0 AND vsh.store_type = 1
        <if test="branchId != null">
            AND vsh.store_branch_id = #{branchId}
        </if>
        <if test="startDate != null">
            AND vsh.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null">
            AND vsh.create_at &lt;= '${endDate}'
        </if>
        <if test="cardCode != null">
            AND (c.code = #{cardCode} OR c.card_face_num = #{cardCode})
        </if>
        <if test="offset != null and rows != null">
            LIMIT ${offset},${rows}
        </if>
    </select>

    <select id="queryVipTradeForBS" resultType="mapUnderscoreToCamelCase">
        SELECT v.vip_name,vth.* FROM vip_trade_history vth
        LEFT JOIN vip v ON vth.tenant_id = v.tenant_id AND vth.vip_id = v.id
        LEFT JOIN card c ON vth.tenant_id = c.tenant_id AND vth.vip_id = c.holder_id
        WHERE vth.tenant_id = #{tenantId} AND vth.is_deleted = 0 AND (vth.trade_type = 1 OR vth.trade_type = 3)
        <if test="branchId != null">
            AND vth.trade_branch_id = #{branchId}
        </if>
        <if test="startDate != null">
            AND vth.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null">
            AND vth.create_at &lt;= '${endDate}'
        </if>
        <if test="cardCode != null">
            AND (c.code = #{cardCode} OR c.card_face_num = #{cardCode})
        </if>
        <if test="offset != null and rows != null">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="isHasRepeatPhoneOfVip" resultType="java.lang.Integer">
      SELECT count(*) FROM(
      select phone,count(*) as count from vip WHERE tenant_id = #{tenantId}
      <if test="groups != null and groups != ''">
        AND branch_id in (${groups})
      </if>
      and is_deleted = 0
      AND phone IS NOT NULL AND phone &lt;&gt; '' group by phone having count>1) tmp
    </select>
    <select id="isHasRepeatCardCode" resultType="java.lang.Integer">
      SELECT count(1) FROM (SELECT M.code,COUNT(1) AS 'count' FROM (
      SELECT `code` FROM card WHERE tenant_id = #{tenantId}
      <if test="groups != null and groups != ''">
        AND branch_id in (${groups})
      </if>
      AND is_deleted=0 AND `type`=4 AND CODE IS NOT NULL AND CODE &lt;&gt; ''
      UNION ALL
      SELECT `card_face_num` AS 'code' FROM card WHERE tenant_id = #{tenantId}
      <if test="groups != null and groups != ''">
        AND branch_id in (${groups})
      </if>
      AND is_deleted=0 AND `type`=4 AND card_face_num IS NOT NULL AND card_face_num &lt;&gt; ''
      AND CODE &lt;&gt; card_face_num
      )M GROUP BY M.code HAVING COUNT(1) > 1) S
    </select>
  <select id="branchDiscount" resultType="mapUnderscoreToCamelCase">
    SELECT * FROM branch_discount WHERE is_deleted = 0 AND tenant_id = #{tenantId} AND branch_id = #{branchId} AND type_id = #{typeId} LIMIT 1
  </select>
</mapper>