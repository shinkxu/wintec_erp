<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="erp.chain.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="erp.chain.domain.Employee">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Fri Nov 04 15:05:01 CST 2016.
        -->
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="tenant_id" property="tenantId" jdbcType="BIGINT"/>
        <result column="branch_id" property="branchId" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="login_name" property="loginName" jdbcType="VARCHAR"/>
        <result column="code" property="code" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password_for_local" property="passwordForLocal" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="qq" property="qq" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="memo" property="memo" jdbcType="VARCHAR"/>
        <result column="create_by" property="createBy" jdbcType="VARCHAR"/>
        <result column="create_at" property="createAt" jdbcType="TIMESTAMP"/>
        <result column="last_update_by" property="lastUpdateBy" jdbcType="VARCHAR"/>
        <result column="last_update_at" property="lastUpdateAt" jdbcType="TIMESTAMP"/>
        <result column="is_deleted" property="isDeleted" jdbcType="BIT"/>
        <result column="state" property="state" jdbcType="BIGINT"/>
        <result column="birthday" property="birthday" jdbcType="TIMESTAMP"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="head_portrait_big" property="headPortraitBig" jdbcType="VARCHAR"/>
        <result column="head_portrait_small" property="headPortraitSmall" jdbcType="VARCHAR"/>
        <result column="discount_rate" property="discountRate" jdbcType="INTEGER"/>
        <result column="discount_amount" property="discountAmount" jdbcType="INTEGER"/>
        <result column="card_id" property="cardId" jdbcType="BIGINT"/>
        <result column="card_code" property="cardCode" jdbcType="VARCHAR"/>
        <result column="version" property="version" jdbcType="BIGINT"/>
        <result column="local_id" property="localId" jdbcType="BIGINT"/>
        <!--<result column="role_id" property="roleId" jdbcType="BIGINT" />-->
        <!--<result column="role_name" property="roleName" jdbcType="VARCHAR" />-->
        <!--<result column="is_attendant" property="isAttendant" jdbcType="BIT" />-->
    </resultMap>

    <insert id="insert" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Fri Nov 04 15:05:01 CST 2016.
        -->
        insert into employee (id, tenant_id, branch_id,
        user_id, login_name, code,
        name, password_for_local, phone,
        qq, email, memo, create_by,
        create_at, last_update_by, last_update_at,
        is_deleted, state, birthday,
        sex, head_portrait_big, head_portrait_small,
        discount_rate, discount_amount, card_id,
        card_code, version, local_id,price_privilege,sale_rate,store_rate,ck_rate,yfk_rate)
        values (#{id,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT},
        #{userId,jdbcType=BIGINT}, #{loginName,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR},
        #{name,jdbcType=VARCHAR}, #{passwordForLocal,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR},
        #{qq,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{memo,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR},
        #{createAt,jdbcType=TIMESTAMP}, #{lastUpdateBy,jdbcType=VARCHAR}, #{lastUpdateAt,jdbcType=TIMESTAMP},
        #{isDeleted,jdbcType=BIT}, #{state,jdbcType=BIGINT}, #{birthday,jdbcType=TIMESTAMP},
        #{sex,jdbcType=TINYINT}, #{headPortraitBig,jdbcType=VARCHAR}, #{headPortraitSmall,jdbcType=VARCHAR},
        #{discountRate,jdbcType=INTEGER}, #{discountAmount,jdbcType=INTEGER}, #{cardId,jdbcType=BIGINT},
        #{cardCode,jdbcType=VARCHAR}, #{version,jdbcType=BIGINT}, #{localId,jdbcType=BIGINT},
        #{pricePrivilege, jdbcType=BIT},#{saleRate ,jdbcType=DECIMAL},#{storeRate,jdbcType=DECIMAL},#{ckRate,jdbcType=DECIMAL},#{yfkRate,jdbcType=DECIMAL})
    </insert>

    <update id="update" parameterType="map">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Fri Nov 04 15:05:01 CST 2016.
        -->
        update employee
        <set>
            <if test="tenantId != null">
                tenant_id = #{tenantId,jdbcType=BIGINT},
            </if>
            <if test="branchId != null">
                branch_id = #{branchId,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="loginName != null">
                login_name = #{loginName,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="passwordForLocal != null">
                password_for_local = #{passwordForLocal,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="qq != null">
                qq = #{qq,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="memo != null">
                memo = #{memo,jdbcType=VARCHAR},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null">
                create_at = #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="lastUpdateBy != null">
                last_update_by = #{lastUpdateBy,jdbcType=VARCHAR},
            </if>
            <if test="lastUpdateAt != null">
                last_update_at = #{lastUpdateAt,jdbcType=TIMESTAMP},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted,jdbcType=BIT},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=BIGINT},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=TIMESTAMP},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="headPortraitBig != null">
                head_portrait_big = #{headPortraitBig,jdbcType=VARCHAR},
            </if>
            <if test="headPortraitSmall != null">
                head_portrait_small = #{headPortraitSmall,jdbcType=VARCHAR},
            </if>
            <if test="discountRate != null">
                discount_rate = #{discountRate,jdbcType=INTEGER},
            </if>
            <if test="discountAmount != null">
                discount_amount = #{discountAmount,jdbcType=INTEGER},
            </if>
            <if test="cardId != null">
                card_id = #{cardId,jdbcType=BIGINT},
            </if>
            <if test="cardCode != null">
                card_code = #{cardCode,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=BIGINT},
            </if>
            <if test="localId != null">
                local_id = #{localId,jdbcType=BIGINT},
            </if>
            <if test="pricePrivilege != null">
                price_privilege = #{pricePrivilege,jdbcType=BIT},
            </if>

        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateEmployee" parameterType="erp.chain.domain.Employee">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Fri Nov 04 15:05:01 CST 2016.
        -->
        update employee
        <set>
            <if test="tenantId != null">
                tenant_id = #{tenantId,jdbcType=BIGINT},
            </if>
            <if test="branchId != null">
                branch_id = #{branchId,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="loginName != null">
                login_name = #{loginName,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="passwordForLocal != null">
                password_for_local = #{passwordForLocal,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="qq != null">
                qq = #{qq,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="memo != null">
                memo = #{memo,jdbcType=VARCHAR},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null">
                create_at = #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="lastUpdateBy != null">
                last_update_by = #{lastUpdateBy,jdbcType=VARCHAR},
            </if>
            <if test="lastUpdateAt != null">
                last_update_at = #{lastUpdateAt,jdbcType=TIMESTAMP},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted,jdbcType=BIT},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=BIGINT},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=TIMESTAMP},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="headPortraitBig != null">
                head_portrait_big = #{headPortraitBig,jdbcType=VARCHAR},
            </if>
            <if test="headPortraitSmall != null">
                head_portrait_small = #{headPortraitSmall,jdbcType=VARCHAR},
            </if>
            <if test="discountRate != null">
                discount_rate = #{discountRate,jdbcType=INTEGER},
            </if>
            <if test="discountAmount != null">
                discount_amount = #{discountAmount,jdbcType=INTEGER},
            </if>
            <if test="cardId != null">
                card_id = #{cardId,jdbcType=BIGINT},
            </if>
            <if test="cardCode != null">
                card_code = #{cardCode,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=BIGINT},
            </if>
            <if test="localId != null">
                local_id = #{localId,jdbcType=BIGINT},
            </if>
            <if test="pricePrivilege != null">
                price_privilege = #{pricePrivilege,jdbcType=BIT},
            </if>
            <if test="saleRate != null">
                sale_rate = #{saleRate,jdbcType=DECIMAL},
            </if>
            <if test="storeRate != null">
                store_rate = #{storeRate,jdbcType=DECIMAL},
            </if>
            <if test="ckRate != null">
                ck_rate = #{ckRate,jdbcType=DECIMAL},
            </if>
            <if test="yfkRate != null">
                yfk_rate = #{yfkRate,jdbcType=DECIMAL},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="select" parameterType="map" resultType="erp.chain.domain.Employee">
        select * from employee
        <where>
            is_deleted = false
            <if test="tenantId != null">
                AND tenant_id = ${tenantId}
            </if>
            <if test="branchId != null">
                AND branch_id = ${branchId}
            </if>
            <if test="code != null">
                AND code = #{code}
            </if>
        </where>
    </select>

    <select id="findMaxEmployeeCode" resultType="string">
    SELECT MAX(code) FROM employee WHERE tenant_id = ${tenantId} AND is_deleted = 0
  </select>
    <select id="queryEmployee" resultType="mapUnderscoreToCamelCase">
        SELECT
        e.*,
        b.name branch_name
        FROM
        employee e
        INNER JOIN branch b
        ON e.branch_id=b.id
        AND e.tenant_id=b.tenant_id
        AND e.is_deleted=0
        AND e.tenant_id=${tenantId}
        AND e.branch_id=${branchId}
        <if test="employeeInfo != null and employeeInfo!=''">
            and ( e.code like '%${employeeInfo}%' or e.name like '%${employeeInfo}%')
        </if>
        ORDER BY e.id ASC
        <if test="offset != null and rows != null">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="queryEmployeeSum" resultType="Long">
        SELECT
        COUNT(1)
        FROM
        employee e
        WHERE e.is_deleted=0
        AND e.tenant_id=${tenantId}
        AND e.branch_id=${branchId}
        <if test="employeeInfo != null and employeeInfo!=''">
            and ( e.code like '%${employeeInfo}%' or e.name like '%${employeeInfo}%')
        </if>
    </select>
    <select id="queryRoles" resultType="mapUnderscoreToCamelCase">
    SELECT sr.* FROM s_user_role_r surr
    INNER JOIN s_role sr ON sr.id=surr.role_id
    AND surr.user_id=#{userId}
    AND sr.is_deleted=0
  </select>

    <select id="queryRolesByCheckPhoneRoles" resultType="mapUnderscoreToCamelCase">
        SELECT sr.* FROM s_user_role_r surr
        INNER JOIN s_role sr ON sr.id=surr.role_id
        AND sr.role_code in(04,01)
        AND surr.user_id=#{userId}
        AND sr.is_deleted=0
    </select>


    <select id="queryEmployeeById" resultType="mapUnderscoreToCamelCase">
    SELECT
    e.*,
    b.name branch_name
    FROM
    employee e
    INNER JOIN branch b
    ON e.branch_id=b.id
    AND e.tenant_id=b.tenant_id
    AND e.is_deleted=0
    AND e.tenant_id=${tenantId}
    AND e.id=#{id}
  </select>

    <select id="queryEmployeeByTenantIdAndBranchIdAndUserId" resultType="mapUnderscoreToCamelCase">
        SELECT
        *
        FROM
        employee e
        WHERE e.is_deleted=0
        AND e.tenant_id=${tenantId}
        AND e.user_id=#{userId}
        AND e.branch_id=#{branchId}
    </select>



    <select id="getEmployeeById" resultType="erp.chain.domain.Employee">
    SELECT
    *
    FROM
    employee e
    WHERE e.is_deleted=0
    AND e.tenant_id=${tenantId}
    AND e.id=#{id}
  </select>

    <select id="findRole" resultType="Long">
    SELECT COUNT(1) FROM s_role WHERE tenant_id=${tenantId} AND is_deleted=0 AND id=#{roleId}
  </select>

    <delete id="deleteOldRole">
    DELETE FROM s_user_role_r WHERE user_id=#{userId}
  </delete>

    <insert id="saveRole" parameterType="map">
    INSERT INTO s_user_role_r(user_id,role_id,tenant_id) VALUES(#{userId},#{roleId},#{tenantId})
  </insert>

    <select id="getEmployeeCode" resultType="String">
    SELECT MAX(code) FROM employee WHERE tenant_id=${tenantId} AND is_deleted=0 AND code != '00000'
  </select>

    <select id="getEmployee" resultType="erp.chain.domain.Employee">
    SELECT * FROM employee WHERE user_id=#{userId} AND tenant_id=${tenantId} AND is_deleted=0
  </select>

    <select id="getTenantEmployee" resultType="erp.chain.domain.Employee">
    SELECT * FROM employee WHERE tenant_id=${tenantId} AND is_deleted=0 AND code="0000"
  </select>
    <select id="queryEmpPager" resultType="mapUnderscoreToCamelCase">
        SELECT e.*, b.code branch_code, b.name branch_name FROM employee e INNER JOIN branch b ON e.branch_id = b.id AND
        b.is_deleted = 0 AND e.is_deleted = 0 AND e.tenant_id = ${tenantId} AND e.branch_id = ${branchId}
        <if test="codeOrName!=null and codeOrName!=''">
            AND (e.code like '%{codeOrName}' or e.name like '%{codeOrName}')
        </if>
        <if test="code!=null and code!=''">
            AND e.code = #{code}
        </if>
        order by e.create_at ASC
        <if test="offset != null and rows != null">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="queryEmpPagerSum" resultType="Long">
        SELECT count(e.id) FROM employee e INNER JOIN branch b ON e.branch_id = b.id AND b.is_deleted = 0
        AND e.is_deleted = 0 AND e.tenant_id = ${tenantId} AND e.branch_id = ${branchId}
        <if test="codeOrName!=null and codeOrName!=''">
            AND (e.code like '%{codeOrName}' or e.name like '%{codeOrName}')
        </if>
        <if test="code!=null and code!=''">
            AND e.code = #{code}
        </if>
    </select>
    <select id="findEmployeeByUser" resultType="erp.chain.domain.Employee">
    SELECT * FROM employee WHERE is_deleted=0 AND user_id=#{userId}
  </select>
    <update id="removeMobileBind">
        UPDATE employee SET phone = NULL WHERE user_id = #{userId}
    </update>

    <!--设置区域权限-->
    <update id="areaAuthority">
        UPDATE employee
        <if test="areaIds != null and areaIds != ''">
            SET user_areas = '${areaIds}'
        </if>
        <if test="areaIds == null or areaIds == ''">
            SET user_areas = NULL
        </if>
        WHERE id = ${id} AND tenant_id = ${tenantId} AND branch_id = ${branchId}
    </update>
    <update id="deleteCardInfo">
    UPDATE employee SET card_id=NULL,card_code=NULL,last_update_at=NOW() WHERE id=#{empId}
  </update>

    <!--导购员-->
    <select id="guidePercentageSale" resultType="mapUnderscoreToCamelCase">
        SELECT gsd.sale_code, gsd.create_at, gsd.is_refund, gsd.is_free_of_charge, gsd.guide_id, e.name guide_name,
        gsd.goods_id, g.goods_name, gsd.sale_price,
        IF(gsd.is_refund = 1, -ABS(gsd.quantity),ABS(gsd.quantity)) quantity ,
        IF(gsd.is_refund = 1, -ABS(gsd.spec_amount), ABS(gsd.spec_amount)) spec_amount,
        IF(gsd.is_refund = 1, -ABS(gsd.total_amount), ABS(gsd.total_amount)) total_amount,
        IF(gsd.is_refund = 1,
        -(ABS(gsd.discount_amount)+IF(gsd.is_free_of_charge=0,0,gsd.total_amount-IFNULL(gsd.spec_amount,0))),
        (ABS(gsd.discount_amount)+IF(gsd.is_free_of_charge=0,0,gsd.total_amount-IFNULL(gsd.spec_amount,0))))
        discount_amount,
        IF(gsd.is_refund = 1, -ABS(gsd.received_amount), ABS(gsd.received_amount)) received_amount,
        gsd.sale_rate,
        IF(gsd.is_refund = 1, -ABS(gsd.commission_amount), ABS(gsd.commission_amount)) commission_amount
        FROM guide_sale_detail gsd
        INNER JOIN goods g ON gsd.goods_id = g.id AND gsd.tenant_id = g.tenant_id
        INNER JOIN employee e ON gsd.guide_id = e.id AND gsd.tenant_id = e.tenant_id
        WHERE gsd.is_deleted = 0 AND gsd.tenant_id = ${tenantId}
        <if test="branchId != null and branchId != ''">
            AND gsd.branch_id IN (${branchId})
        </if>
        <if test="startDate != null and startDate != ''">
            AND gsd.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null and endDate != ''">
            AND gsd.create_at &lt;= '${endDate}'
        </if>
        <if test="goodsId != null and goodsId != ''">
            AND gsd.goods_id in(${goodsId})
        </if>
        <if test="guideId != null and guideId != ''">
            AND gsd.guide_id = ${guideId}
        </if>
        LIMIT ${offset},${rows}
    </select>
    <select id="guidePercentageSaleSum" resultType="mapUnderscoreToCamelCase">
        SELECT COUNT(1) total, SUM(IFNULL(IF(gsd.is_refund = 1, -ABS(gsd.quantity),ABS(gsd.quantity)),0)) quantity,
        SUM(IFNULL(IF(gsd.is_refund = 1, -ABS(gsd.spec_amount), ABS(gsd.spec_amount)),0)) spec_amount,
        SUM(IFNULL(IF(gsd.is_refund = 1, -ABS(gsd.total_amount), ABS(gsd.total_amount)),0)) total_amount,
        SUM(IFNULL(IF(gsd.is_refund = 1,
        -(ABS(gsd.discount_amount)+IF(gsd.is_free_of_charge=0,0,gsd.total_amount-IFNULL(gsd.spec_amount,0))),
        (ABS(gsd.discount_amount)+IF(gsd.is_free_of_charge=0,0,gsd.total_amount-IFNULL(gsd.spec_amount,0)))),0))
        discount_amount,
        SUM(IFNULL(IF(gsd.is_refund = 1, -ABS(gsd.received_amount), ABS(gsd.received_amount)),0)) received_amount,
        SUM(IFNULL(IF(gsd.is_refund = 1, -ABS(gsd.commission_amount), ABS(gsd.commission_amount)),0)) commission_amount
        FROM guide_sale_detail gsd
        WHERE gsd.is_deleted = 0 AND gsd.tenant_id = ${tenantId}
        <if test="branchId != null and branchId != ''">
            AND gsd.branch_id IN (${branchId})
        </if>
        <if test="startDate != null and startDate != ''">
            AND gsd.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null and endDate != ''">
            AND gsd.create_at &lt;= '${endDate}'
        </if>
        <if test="goodsId != null and goodsId != ''">
            AND gsd.goods_id IN (${goodsId})
        </if>
        <if test="guideId != null and guideId != ''">
            AND gsd.guide_id = ${guideId}
        </if>
    </select>

    <select id="guidePercentageStore" resultType="mapUnderscoreToCamelCase">
        SELECT vsh.store_code, v.vip_name, v.phone, v.type_id, vt.type_name, vsh.create_at, vsh.store_type,
        vsh.pay_amount, vsh.gift_amount, vsh.guide_id,
        e.name guide_name, vsh.store_rate, vsh.commission_amount, b.name branch_name, vsh.create_by
        FROM vip_store_history vsh
        INNER JOIN vip v ON vsh.vip_id = v.id AND vsh.tenant_id = v.tenant_id
        INNER JOIN employee e ON vsh.guide_id = e.id AND vsh.tenant_id = e.tenant_id
        INNER JOIN branch b ON vsh.store_branch_id = b.id
        LEFT JOIN vip_type vt ON v.type_id = vt.id AND vsh.tenant_id = vt.tenant_id
        WHERE vsh.is_deleted = 0 AND vsh.store_type IN (1,2,4) AND vsh.tenant_id = ${tenantId}
        <if test="branchId != null and branchId !=''">
            AND vsh.store_branch_id IN (${branchId})
        </if>
        <if test="startDate != null and startDate != ''">
            AND vsh.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null and endDate != ''">
            AND vsh.create_at &lt;= '${endDate}'
        </if>
        <if test="vipId != null and vipId != ''">
            AND vsh.vip_id = ${vipId}
        </if>
        <if test="guideId != null and guideId != ''">
            AND vsh.guide_id = ${guideId}
        </if>
        LIMIT ${offset},${rows}
    </select>

    <select id="guidePercentageStoreSum" resultType="mapUnderscoreToCamelCase">
        SELECT COUNT(1) total, SUM(IFNULL(vsh.pay_amount,0)) pay_amount, SUM(IFNULL(vsh.gift_amount,0)) gift_amount,
        SUM(IFNULL(vsh.commission_amount,0)) commission_amount
        FROM vip_store_history vsh
        INNER JOIN vip v ON vsh.vip_id = v.id AND vsh.tenant_id = v.tenant_id
        INNER JOIN employee e ON vsh.guide_id = e.id AND vsh.tenant_id = e.tenant_id
        INNER JOIN branch b ON vsh.store_branch_id = b.id
        LEFT JOIN vip_type vt ON v.type_id = vt.id AND vsh.tenant_id = vt.tenant_id
        WHERE vsh.is_deleted = 0 AND vsh.store_type IN (1,2,4) AND vsh.tenant_id = ${tenantId}
        <if test="branchId != null and branchId !=''">
            AND vsh.store_branch_id IN (${branchId})
        </if>
        <if test="startDate != null and startDate != ''">
            AND vsh.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null and endDate != ''">
            AND vsh.create_at &lt;= '${endDate}'
        </if>
        <if test="vipId != null and vipId != ''">
            AND vsh.vip_id = ${vipId}
        </if>
        <if test="guideId != null and guideId != ''">
            AND vsh.guide_id = ${guideId}
        </if>
    </select>

    <select id="guideSummary" resultType="mapUnderscoreToCamelCase">
        SELECT SUM(t.sale_quantity) sale_quantity, SUM(t.total_amount) total_amount, SUM(t.received_amount)
        received_amount,
        SUM(t.pay_amount) pay_amount,
        SUM(t.gift_amount),
        SUM(t.gift_amount) gift_amount,
        SUM(t.sale_commission_amount) sale_commission_amount,
        SUM(t.store_commission_amount) store_commission_amount,
        e.code guide_code, e.name guide_name, t.sale_rate, t.store_rate FROM (
        SELECT
        SUM(IF(gsd.is_refund = 1, -ABS(gsd.quantity),ABS(gsd.quantity))) sale_quantity,
        SUM(IF(gsd.is_refund = 1, -ABS(gsd.total_amount), ABS(gsd.total_amount))) total_amount,
        SUM(IF(gsd.is_refund = 1, -ABS(gsd.received_amount), ABS(gsd.received_amount))) received_amount, 0 pay_amount, 0
        gift_amount,
        gsd.guide_id,
        SUM(IF(gsd.is_refund = 1, -ABS(gsd.commission_amount), ABS(gsd.commission_amount))) sale_commission_amount,
        0 store_commission_amount,
        (SUM(IF(gsd.is_refund = 1, -ABS(gsd.commission_amount), ABS(gsd.commission_amount)))/SUM(IF(gsd.is_refund = 1,
        -ABS(gsd.received_amount), ABS(gsd.received_amount))))*100 sale_rate,
        0 store_rate
        FROM guide_sale_detail gsd
        WHERE gsd.tenant_id = ${tenantId} AND gsd.guide_id IS NOT NULL
        <if test="branchId != null and branchId !=''">
            AND gsd.branch_id = ${branchId}
        </if>
        <if test="startDate != null and startDate != ''">
            AND gsd.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null and endDate !=''">
            AND gsd.create_at &lt;= '${endDate}'
        </if>
        <if test="guideId != null and guideId != ''">
            AND gsd.guide_id = ${guideId}
        </if>
        GROUP BY gsd.guide_id
        UNION ALL
        SELECT 0 sale_quantity, 0 total_amount, 0 received_amount, SUM(vsh.pay_amount) pay_amount, SUM(vsh.gift_amount)
        gift_amount,
        vsh.guide_id, 0 sale_commission_amount, SUM(vsh.commission_amount) store_commission_amount, 0 sale_rate,
        (SUM(vsh.commission_amount)/SUM(vsh.pay_amount))*100 store_rate
        FROM vip_store_history vsh WHERE vsh.tenant_id = ${tenantId} AND vsh.guide_id IS NOT NULL
        <if test="branchId != null and branchId != ''">
            AND vsh.store_branch_id = ${branchId}
        </if>
        <if test="startDate != null and startDate != ''">
            AND vsh.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null and endDate !=''">
            AND vsh.create_at &lt;= '${endDate}'
        </if>
        <if test="guideId != null and guide != ''">
            AND vsh.guide_id = ${guideId}
        </if>
        GROUP BY vsh.guide_id
        ) t INNER JOIN employee e ON t.guide_id = e.id GROUP BY t.guide_id
    </select>
    <select id="guideSummarySum" resultType="mapUnderscoreToCamelCase">
        SELECT COUNT(1) total, SUM(t.sale_quantity) sale_quantity, SUM(t.total_amount) total_amount,
        SUM(t.received_amount) received_amount,
        SUM(t.pay_amount) pay_amount, SUM(t.gift_amount) gift_amount,
        SUM(t.sale_commission_amount) sale_commission_amount,SUM(t.store_commission_amount) store_commission_amount FROM
        (
        SELECT SUM(IF(gsd.is_refund = 1, -ABS(gsd.quantity),ABS(gsd.quantity))) sale_quantity,
        SUM(IF(gsd.is_refund = 1, -ABS(gsd.total_amount), ABS(gsd.total_amount))) total_amount,
        SUM(IF(gsd.is_refund = 1, -ABS(gsd.received_amount), ABS(gsd.received_amount))) received_amount, 0 pay_amount, 0
        gift_amount,
        gsd.guide_id, SUM(IF(gsd.is_refund = 1, -ABS(gsd.commission_amount), ABS(gsd.commission_amount)))
        sale_commission_amount, 0 store_commission_amount
        FROM guide_sale_detail gsd
        WHERE gsd.tenant_id = ${tenantId} AND gsd.guide_id IS NOT NULL
        <if test="branchId != null and branchId !=''">
            AND gsd.branch_id = ${branchId}
        </if>
        <if test="startDate != null and startDate != ''">
            AND gsd.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null and endDate !=''">
            AND gsd.create_at &lt;= '${endDate}'
        </if>
        <if test="guideId != null and guide != ''">
            AND gsd.guide_id = ${guideId}
        </if>
        GROUP BY gsd.guide_id
        UNION ALL
        SELECT 0 sale_quantity, 0 total_amount, 0 received_amount, SUM(vsh.pay_amount) pay_amount, SUM(vsh.gift_amount)
        gift_amount,
        vsh.guide_id, 0 sale_commission_amount, SUM(vsh.commission_amount) store_commission_amount
        FROM vip_store_history vsh WHERE vsh.tenant_id = ${tenantId} AND vsh.guide_id IS NOT NULL
        <if test="branchId != null and branchId != ''">
            AND vsh.store_branch_id = ${branchId}
        </if>
        <if test="startDate != null and startDate != ''">
            AND vsh.create_at &gt;= '${startDate}'
        </if>
        <if test="endDate != null and endDate !=''">
            AND vsh.create_at &lt;= '${endDate}'
        </if>
        <if test="guideId != null and guide != ''">
            AND vsh.guide_id = ${guideId}
        </if>
        GROUP BY vsh.guide_id
        ) t
    </select>
    <!--查询导购员-->
    <select id="findEmployeeById" resultType="erp.chain.domain.Employee">
        SELECT * FROM employee WHERE tenant_id = ${tenantId} AND branch_id = ${branchId} AND id = ${id} AND is_deleted = 0
    </select>

    <sql id="guiDe">
        SELECT d.id, d.code, d.name, d.user_id,d.login_name, d.create_at, d.branch_name, d.state,
        GROUP_CONCAT(e.role_name) AS role_name
        FROM (
        SELECT e.id, e.code, e.name, e.user_id, e.login_name, e.create_at,b.name branch_name,e.state, sur.role_id
        FROM employee e
        INNER JOIN s_user_role_r sur ON e.user_id = sur.user_id
        INNER JOIN branch b ON e.branch_id = b.id AND e.tenant_id = b.tenant_id
        WHERE e.tenant_id =#{tenantId}
        <if test="branchId !=null and branchId !=''">
            AND e.branch_id in (${branchId})
        </if>
        <if test="guideName !=null and guideName !='' and isExactQuery == 0">
            AND (e.code LIKE '%${guideName}%' or e.name LIKE '%${guideName}%')
        </if>
        <if test="guideName !=null and guideName !='' and isExactQuery == 1">
            AND (e.code = #{guideName} or e.name = #{guideName})
        </if>
        ) d
        INNER JOIN s_role e ON d.role_id = e.id
        AND e.id in (SELECT id FROM s_role WHERE role_type=5 AND is_deleted = 0 AND tenant_id = ${tenantId} AND
        branch_id in(${branchId}))
        GROUP BY d.user_id
    </sql>
    <sql id="pageFoot">
        <if test="offset != null and rows != null">
            LIMIT ${offset},${rows}
        </if>
    </sql>

    <!--导购员-->
    <select id="queryGuiDe" parameterType="Map" resultType="mapUnderscoreToCamelCase">
        <include refid="guiDe"/>
        <include refid="pageFoot"/>
    </select>
    <select id="queryGuiDeTotal" parameterType="Map" resultType="Integer">
        SELECT count(1) as total from(
        <include refid="guiDe"/>
        ) a
    </select>
    <select id="queryGuideRole" parameterType="Map" resultType="erp.chain.domain.SysRole">
    select  * from s_role where tenant_id = #{tenantId} and branch_id=#{branchId} and role_type=5 and is_deleted=0
  </select>
    <update id="deleteEmployee" parameterType="map">
        update employee SET last_update_by = #{lastUpdateBy,jdbcType=VARCHAR}, last_update_at = #{lastUpdateAt,jdbcType=TIMESTAMP}, is_deleted = #{isDeleted,jdbcType=BIT}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="findList" resultType="mapUnderscoreToCamelCase">
        SELECT
        e.*,
        b.name branch_name,
        b.branch_type
        FROM
        employee e
        INNER JOIN branch b
        ON e.branch_id=b.id
        AND e.tenant_id=b.tenant_id
        WHERE e.is_deleted=0
        AND e.tenant_id=${tenantId}
        <if test="branchIds != null and branchIds!=''">
            AND e.branch_id in (${branchIds})
        </if>
        <if test="selectBranchIds != null and selectBranchIds!=''">
            AND e.branch_id in (${selectBranchIds})
        </if>
        <if test="employeeInfo != null and employeeInfo!=''">
            and ( e.code like '%${employeeInfo}%' or e.name like '%${employeeInfo}%')
        </if>
        <if test="order==null and field==null">
            ORDER BY e.id ASC
        </if>
        <if test="order!=null and field!=null">
            ORDER BY e.${field} ${order}
        </if>
        <if test="offset != null and rows != null">
            LIMIT ${offset},${rows}
        </if>
    </select>
    <select id="countList" resultType="long">
        SELECT
        COUNT(1)
        FROM
        employee e
        WHERE
        e.is_deleted=0
        AND e.tenant_id=${tenantId}
        <if test="branchIds != null and branchIds!=''">
            AND e.branch_id in (${branchIds})
        </if>
        <if test="selectBranchIds != null and selectBranchIds!=''">
            AND e.branch_id in (${selectBranchIds})
        </if>
        <if test="employeeInfo != null and employeeInfo!=''">
            and ( e.code like '%${employeeInfo}%' or e.name like '%${employeeInfo}%')
        </if>
    </select>
</mapper>