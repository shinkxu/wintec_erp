<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="erp.chain.mapper.GoodsMapper" >
  <resultMap id="BaseResultMap" type="erp.chain.domain.Goods" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="tenant_id" property="tenantId" jdbcType="BIGINT" />
    <result column="branch_id" property="branchId" jdbcType="BIGINT" />
    <result column="category_id" property="categoryId" jdbcType="BIGINT" />
    <result column="category_name" property="categoryName" jdbcType="VARCHAR" />
    <result column="goods_code" property="goodsCode" jdbcType="CHAR" />
    <result column="goods_name" property="goodsName" jdbcType="VARCHAR" />
    <result column="short_name" property="shortName" jdbcType="VARCHAR" />
    <result column="goods_unit_id" property="goodsUnitId" jdbcType="BIGINT" />
    <result column="goods_unit_name" property="goodsUnitName" jdbcType="VARCHAR" />
    <result column="bar_code" property="barCode" jdbcType="VARCHAR" />
    <result column="mnemonic" property="mnemonic" jdbcType="VARCHAR" />
    <result column="west_name" property="westName" jdbcType="VARCHAR" />
    <result column="spec" property="spec" jdbcType="VARCHAR" />
    <result column="sale_price" property="salePrice" jdbcType="DECIMAL" />
    <result column="vip_price" property="vipPrice" jdbcType="DECIMAL" />
    <result column="vip_price1" property="vipPrice1" jdbcType="DECIMAL" />
    <result column="vip_price2" property="vipPrice2" jdbcType="DECIMAL" />
    <result column="goods_status" property="goodsStatus" jdbcType="TINYINT" />
    <result column="is_dsc" property="isDsc" jdbcType="BIT" />
    <result column="is_lowerfee" property="isLowerfee" jdbcType="BIT" />
    <result column="is_temp" property="isTemp" jdbcType="BIT" />
    <result column="is_giveticket" property="isGiveticket" jdbcType="BIT" />
    <result column="is_useticket" property="isUseticket" jdbcType="BIT" />
    <result column="is_score" property="isScore" jdbcType="BIT" />
    <result column="score_value" property="scoreValue" jdbcType="DECIMAL" />
    <result column="is_changeprice" property="isChangeprice" jdbcType="BIT" />
    <result column="is_modifynum" property="isModifynum" jdbcType="BIT" />
    <result column="is_revised_price" property="isRevisedPrice" jdbcType="BIT" />
    <result column="takeout_price" property="takeoutPrice" jdbcType="DECIMAL" />
    <result column="photo" property="photo" jdbcType="VARCHAR" />
    <result column="goods_desc" property="goodsDesc" jdbcType="VARCHAR" />
    <result column="tag" property="tag" jdbcType="VARCHAR" />
    <result column="is_servicefee" property="isServicefee" jdbcType="BIT" />
    <result column="is_sertc" property="isSertc" jdbcType="BIT" />
    <result column="is_saletc" property="isSaletc" jdbcType="BIT" />
    <result column="sale_tctype" property="saleTctype" jdbcType="TINYINT" />
    <result column="sale_tcrate" property="saleTcrate" jdbcType="DECIMAL" />
    <result column="sale_tctotal" property="saleTctotal" jdbcType="DECIMAL" />
    <result column="is_muchspec" property="isMuchspec" jdbcType="BIT" />
    <result column="weight" property="weight" jdbcType="DECIMAL" />
    <result column="is_store" property="isStore" jdbcType="BIT" />
    <result column="price_type" property="priceType" jdbcType="TINYINT" />
    <result column="is_weigh" property="isWeigh" jdbcType="BIT" />
    <result column="is_for_points" property="isForPoints" jdbcType="BIT" />
    <result column="points_value" property="pointsValue" jdbcType="DECIMAL" />
    <result column="is_ranked" property="isRanked" jdbcType="BIT" />
    <result column="is_recommended" property="isRecommended" jdbcType="BIT" />
    <result column="memo" property="memo" jdbcType="VARCHAR" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
    <result column="last_update_by" property="lastUpdateBy" jdbcType="VARCHAR" />
    <result column="last_update_at" property="lastUpdateAt" jdbcType="TIMESTAMP" />
    <result column="is_deleted" property="isDeleted" jdbcType="BIT" />
    <result column="goods_type" property="goodsType" jdbcType="TINYINT" />
    <result column="is_hotgood" property="isHotgood" jdbcType="BIT" />
    <result column="is_newgood" property="isNewgood" jdbcType="BIT" />
    <result column="is_takeout" property="isTakeout" jdbcType="BIT" />
    <result column="is_take" property="isTake" jdbcType="BIT" />
    <result column="is_order" property="isOrder" jdbcType="BIT" />
    <result column="is_here" property="isHere" jdbcType="BIT" />
    <result column="instore_code" property="instoreCode" jdbcType="CHAR" />
    <result column="mini_order_num" property="miniOrderNum" jdbcType="INTEGER" />
    <result column="spec_group_id" property="specGroupId" jdbcType="VARCHAR" />
    <result column="purchasing_price" property="purchasingPrice" jdbcType="DECIMAL" />
    <result column="shipping_price1" property="shippingPrice1" jdbcType="DECIMAL" />
    <result column="shipping_price2" property="shippingPrice2" jdbcType="DECIMAL" />
    <result column="is_pricetag" property="isPricetag" jdbcType="TINYINT" />
    <result column="is_custom_price" property="isCustomPrice" jdbcType="BIT" />
    <result column="version" property="version" jdbcType="BIGINT" />
    <result column="brand_id" property="brandId" jdbcType="BIGINT" />
    <result column="local_id" property="localId" jdbcType="BIGINT" />
    <result column="sale_open_price" property="saleOpenPrice" jdbcType="DECIMAL" />
    <result column="combination_type" property="combinationType" jdbcType="TINYINT" />
    <result column="parent_id" property="parentId" jdbcType="BIGINT"/>
    <result column="standard_name" property="standardName" jdbcType="VARCHAR"/>
  </resultMap>

  <insert id="insert" parameterType="map" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    insert into goods (id, tenant_id, branch_id, 
      category_id, category_name, goods_code, 
      goods_name, short_name, goods_unit_id, 
      goods_unit_name, bar_code, mnemonic, 
      west_name, spec, sale_price, 
      vip_price,vip_price1, vip_price2, goods_status,
      is_dsc, is_lowerfee, is_temp, is_giveticket, 
      is_useticket, is_score, score_value, 
      is_changeprice, is_modifynum, is_revised_price, 
      takeout_price, photo, goods_desc, 
      tag, is_servicefee, is_sertc, 
      is_saletc, sale_tctype, sale_tcrate, 
      sale_tctotal, is_muchspec, weight, 
      is_store, price_type, is_weigh, 
      is_for_points, points_value, is_ranked, 
      is_recommended, memo, create_by, 
      create_at, last_update_by, last_update_at, 
      is_deleted, goods_type, is_hotgood, 
      is_newgood, is_takeout, is_take, is_order, 
      is_here, instore_code, mini_order_num, 
      spec_group_id, purchasing_price, shipping_price1,
      shipping_price2, is_pricetag, is_custom_price, 
      version, brand_id, local_id, 
      sale_open_price,combination_type,parent_id,standard_name,store_up_limit,store_low_limit,packing_unit_id,packing_unit_name,unit_relation,supplier_id,weigh_plu,
      related_goods_id,box_price,is_allow_change_price,is_allow_vip_discount)
    values (#{id,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT}, 
      #{categoryId,jdbcType=BIGINT}, #{categoryName,jdbcType=VARCHAR}, #{goodsCode,jdbcType=CHAR}, 
      #{goodsName,jdbcType=VARCHAR}, #{shortName,jdbcType=VARCHAR}, #{goodsUnitId,jdbcType=BIGINT}, 
      #{goodsUnitName,jdbcType=VARCHAR}, #{barCode,jdbcType=VARCHAR}, #{mnemonic,jdbcType=VARCHAR}, 
      #{westName,jdbcType=VARCHAR}, #{spec,jdbcType=VARCHAR}, #{salePrice,jdbcType=DECIMAL}, 
      #{vipPrice,jdbcType=DECIMAL},#{vipPrice1,jdbcType=DECIMAL}, #{vipPrice2,jdbcType=DECIMAL}, #{goodsStatus,jdbcType=TINYINT},
      #{isDsc,jdbcType=BIT}, #{isLowerfee,jdbcType=BIT}, #{isTemp,jdbcType=BIT}, #{isGiveticket,jdbcType=BIT}, 
      #{isUseticket,jdbcType=BIT}, #{isScore,jdbcType=BIT}, #{scoreValue,jdbcType=DECIMAL}, 
      #{isChangeprice,jdbcType=BIT}, #{isModifynum,jdbcType=BIT}, #{isRevisedPrice,jdbcType=BIT}, 
      #{takeoutPrice,jdbcType=DECIMAL}, #{photo,jdbcType=VARCHAR}, #{goodsDesc,jdbcType=VARCHAR}, 
      #{tag,jdbcType=VARCHAR}, #{isServicefee,jdbcType=BIT}, #{isSertc,jdbcType=BIT}, 
      #{isSaletc,jdbcType=BIT}, #{saleTctype,jdbcType=TINYINT}, #{saleTcrate,jdbcType=DECIMAL}, 
      #{saleTctotal,jdbcType=DECIMAL}, #{isMuchspec,jdbcType=BIT}, #{weight,jdbcType=DECIMAL}, 
      #{isStore,jdbcType=BIT}, #{priceType,jdbcType=TINYINT}, #{isWeigh,jdbcType=BIT}, 
      #{isForPoints,jdbcType=BIT}, #{pointsValue,jdbcType=DECIMAL}, #{isRanked,jdbcType=BIT}, 
      #{isRecommended,jdbcType=BIT}, #{memo,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR}, 
      #{createAt,jdbcType=TIMESTAMP}, #{lastUpdateBy,jdbcType=VARCHAR}, #{lastUpdateAt,jdbcType=TIMESTAMP}, 
      #{isDeleted,jdbcType=BIT}, #{goodsType,jdbcType=TINYINT}, #{isHotgood,jdbcType=BIT}, 
      #{isNewgood,jdbcType=BIT}, #{isTakeout,jdbcType=BIT}, #{isTake,jdbcType=BIT}, #{isOrder,jdbcType=BIT}, 
      #{isHere,jdbcType=BIT}, #{instoreCode,jdbcType=CHAR}, #{miniOrderNum,jdbcType=INTEGER}, 
      #{specGroupId,jdbcType=VARCHAR}, #{purchasingPrice,jdbcType=DECIMAL}, #{shippingPrice1,jdbcType=DECIMAL},
      #{shippingPrice2,jdbcType=DECIMAL}, #{isPricetag,jdbcType=TINYINT}, #{isCustomPrice,jdbcType=BIT}, 
      #{version,jdbcType=BIGINT}, #{brandId,jdbcType=BIGINT}, #{localId,jdbcType=BIGINT}, 
      #{saleOpenPrice,jdbcType=DECIMAL},#{combinationType,jdbcType=TINYINT},#{parentId,jdbcType=BIGINT},#{standardName,jdbcType=VARCHAR},
      #{storeUpLimit,jdbcType=DECIMAL},#{storeLowLimit,jdbcType=DECIMAL},#{packingUnitId, jdbcType=BIGINT}, #{packingUnitName, jdbcType=VARCHAR},
      #{unitRelation,jdbcType=DECIMAL},#{supplierId,jdbcType=BIGINT},#{weighPlu,jdbcType=BIGINT},#{relatedGoodsId,jdbcType=BIGINT},#{boxPrice,jdbcType=DECIMAL},#{isAllowChangePrice,jdbcType=BIT},#{isAllowVipDiscount,jdbcType=BIT})
  </insert>

  <insert id="saveList" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    insert into goods (id, tenant_id, branch_id,
    category_id, category_name, goods_code,
    goods_name, short_name, goods_unit_id,
    goods_unit_name, bar_code, mnemonic,
    west_name, spec, sale_price,
    vip_price,vip_price1, vip_price2, goods_status,
    is_dsc, is_lowerfee, is_temp, is_giveticket,
    is_useticket, is_score, score_value,
    is_changeprice, is_modifynum, is_revised_price,
    takeout_price, photo, goods_desc,
    tag, is_servicefee, is_sertc,
    is_saletc, sale_tctype, sale_tcrate,
    sale_tctotal, is_muchspec, weight,
    is_store, price_type, is_weigh,
    is_for_points, points_value, is_ranked,
    is_recommended, memo, create_by,
    create_at, last_update_by, last_update_at,
    is_deleted, goods_type, is_hotgood,
    is_newgood, is_takeout, is_take, is_order,
    is_here, instore_code, mini_order_num,
    spec_group_id, purchasing_price, shipping_price1,
    shipping_price2, is_pricetag, is_custom_price,
    version, brand_id, local_id,
    sale_open_price,combination_type,parent_id,standard_name,weigh_plu)
    values
    <foreach item="item" collection="goodsList" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.tenantId,jdbcType=BIGINT}, #{item.branchId,jdbcType=BIGINT},
      #{item.categoryId,jdbcType=BIGINT}, #{item.categoryName,jdbcType=VARCHAR}, #{item.goodsCode,jdbcType=CHAR},
      #{item.goodsName,jdbcType=VARCHAR}, #{item.shortName,jdbcType=VARCHAR}, #{item.goodsUnitId,jdbcType=BIGINT},
      #{item.goodsUnitName,jdbcType=VARCHAR}, #{item.barCode,jdbcType=VARCHAR}, #{item.mnemonic,jdbcType=VARCHAR},
      #{item.westName,jdbcType=VARCHAR}, #{item.spec,jdbcType=VARCHAR}, #{item.salePrice,jdbcType=DECIMAL},
      #{item.vipPrice,jdbcType=DECIMAL},#{item.vipPrice1,jdbcType=DECIMAL}, #{item.vipPrice2,jdbcType=DECIMAL}, #{item.goodsStatus,jdbcType=TINYINT},
      #{item.isDsc,jdbcType=BIT}, #{item.isLowerfee,jdbcType=BIT}, #{item.isTemp,jdbcType=BIT}, #{item.isGiveticket,jdbcType=BIT},
      #{item.isUseticket,jdbcType=BIT}, #{item.isScore,jdbcType=BIT}, #{item.scoreValue,jdbcType=DECIMAL},
      #{item.isChangeprice,jdbcType=BIT}, #{item.isModifynum,jdbcType=BIT}, #{item.isRevisedPrice,jdbcType=BIT},
      #{item.takeoutPrice,jdbcType=DECIMAL}, #{item.photo,jdbcType=VARCHAR}, #{item.goodsDesc,jdbcType=VARCHAR},
      #{item.tag,jdbcType=VARCHAR}, #{item.isServicefee,jdbcType=BIT}, #{item.isSertc,jdbcType=BIT},
      #{item.isSaletc,jdbcType=BIT}, #{item.saleTctype,jdbcType=TINYINT}, #{item.saleTcrate,jdbcType=DECIMAL},
      #{item.saleTctotal,jdbcType=DECIMAL}, #{item.isMuchspec,jdbcType=BIT}, #{item.weight,jdbcType=DECIMAL},
      #{item.isStore,jdbcType=BIT}, #{item.priceType,jdbcType=TINYINT}, #{item.isWeigh,jdbcType=BIT},
      #{item.isForPoints,jdbcType=BIT}, #{item.pointsValue,jdbcType=DECIMAL}, #{item.isRanked,jdbcType=BIT},
      #{item.isRecommended,jdbcType=BIT}, #{item.memo,jdbcType=VARCHAR}, #{item.createBy,jdbcType=VARCHAR},
      #{item.createAt,jdbcType=TIMESTAMP}, #{item.lastUpdateBy,jdbcType=VARCHAR}, #{item.lastUpdateAt,jdbcType=TIMESTAMP},
      #{item.isDeleted,jdbcType=BIT}, #{item.goodsType,jdbcType=TINYINT}, #{item.isHotgood,jdbcType=BIT},
      #{item.isNewgood,jdbcType=BIT}, #{item.isTakeout,jdbcType=BIT}, #{item.isTake,jdbcType=BIT}, #{item.isOrder,jdbcType=BIT},
      #{item.isHere,jdbcType=BIT}, #{item.instoreCode,jdbcType=CHAR}, #{item.miniOrderNum,jdbcType=INTEGER},
      #{item.specGroupId,jdbcType=VARCHAR}, #{item.purchasingPrice,jdbcType=DECIMAL}, #{item.shippingPrice1,jdbcType=DECIMAL},
      #{item.shippingPrice2,jdbcType=DECIMAL}, #{item.isPricetag,jdbcType=TINYINT}, #{item.isCustomPrice,jdbcType=BIT},
      #{item.version,jdbcType=BIGINT}, #{item.brandId,jdbcType=BIGINT}, #{item.localId,jdbcType=BIGINT},
      #{item.saleOpenPrice,jdbcType=DECIMAL},#{item.combinationType,jdbcType=TINYINT},#{item.parentId,jdbcType=BIGINT},#{item.standardName,jdbcType=VARCHAR},#{item.weighPlu,jdbcType=INTEGER})
    </foreach>
  </insert>

  <update id="update" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Nov 04 15:05:01 CST 2016.
    -->
    update goods
    <set >
      <if test="scoreType != null" >
        score_type = #{scoreType,jdbcType=BIGINT},
      </if>
      <if test="scorePercent != null" >
        score_percent = #{scorePercent,jdbcType=BIGINT},
      </if>
      <if test="tenantId != null" >
        tenant_id = #{tenantId,jdbcType=BIGINT},
      </if>
      <if test="branchId != null" >
        branch_id = #{branchId,jdbcType=BIGINT},
      </if>
      <if test="categoryId != null" >
        category_id = #{categoryId,jdbcType=BIGINT},
      </if>
      <if test="categoryName != null" >
        category_name = #{categoryName,jdbcType=VARCHAR},
      </if>
      <if test="specGroupId != null">
      spec_group_id = #{specGroupId,jdbcType=VARCHAR},
      </if>
      <if test="goodsCode != null" >
        goods_code = #{goodsCode,jdbcType=CHAR},
      </if>
      <if test="goodsName != null" >
        goods_name = #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="shortName != null" >
        short_name = #{shortName,jdbcType=VARCHAR},
      </if>
      <if test="goodsUnitId != null" >
        goods_unit_id = #{goodsUnitId,jdbcType=BIGINT},
      </if>
      <if test="goodsUnitName != null" >
        goods_unit_name = #{goodsUnitName,jdbcType=VARCHAR},
      </if>
      <if test="barCode != null" >
        bar_code = #{barCode,jdbcType=VARCHAR},
      </if>
      <if test="mnemonic != null" >
        mnemonic = #{mnemonic,jdbcType=VARCHAR},
      </if>
      <if test="westName != null" >
        west_name = #{westName,jdbcType=VARCHAR},
      </if>
      <if test="spec != null" >
        spec = #{spec,jdbcType=VARCHAR},
      </if>
      <if test="salePrice != null" >
        sale_price = #{salePrice,jdbcType=DECIMAL},
      </if>
      <if test="vipPrice != null" >
        vip_price = #{vipPrice,jdbcType=DECIMAL},
      </if>
      <if test="vipPrice1 != null" >
        vip_price1 = #{vipPrice1,jdbcType=DECIMAL},
      </if>
      <if test="vipPrice2 != null" >
        vip_price2 = #{vipPrice2,jdbcType=DECIMAL},
      </if>
      <if test="goodsStatus != null" >
        goods_status = #{goodsStatus,jdbcType=TINYINT},
      </if>
      <if test="isDsc != null" >
        is_dsc = #{isDsc,jdbcType=BIT},
      </if>
      <if test="isLowerfee != null" >
        is_lowerfee = #{isLowerfee,jdbcType=BIT},
      </if>
      <if test="isTemp != null" >
        is_temp = #{isTemp,jdbcType=BIT},
      </if>
      <if test="isGiveticket != null" >
        is_giveticket = #{isGiveticket,jdbcType=BIT},
      </if>
      <if test="isUseticket != null" >
        is_useticket = #{isUseticket,jdbcType=BIT},
      </if>
      <if test="isScore != null" >
        is_score = #{isScore,jdbcType=BIT},
      </if>
      <if test="scoreValue != null" >
        score_value = #{scoreValue,jdbcType=DECIMAL},
      </if>
      <if test="isChangeprice != null" >
        is_changeprice = #{isChangeprice,jdbcType=BIT},
      </if>
      <if test="isModifynum != null" >
        is_modifynum = #{isModifynum,jdbcType=BIT},
      </if>
      <if test="isRevisedPrice != null" >
        is_revised_price = #{isRevisedPrice,jdbcType=BIT},
      </if>
      <if test="takeoutPrice != null" >
        takeout_price = #{takeoutPrice,jdbcType=DECIMAL},
      </if>
      <if test="photo != null" >
        photo = #{photo,jdbcType=VARCHAR},
      </if>
      <if test="goodsDesc != null" >
        goods_desc = #{goodsDesc,jdbcType=VARCHAR},
      </if>
      <if test="tag != null" >
        tag = #{tag,jdbcType=VARCHAR},
      </if>
      <if test="isServicefee != null" >
        is_servicefee = #{isServicefee,jdbcType=BIT},
      </if>
      <if test="isSertc != null" >
        is_sertc = #{isSertc,jdbcType=BIT},
      </if>
      <if test="isSaletc != null" >
        is_saletc = #{isSaletc,jdbcType=BIT},
      </if>
      <if test="saleTctype != null" >
        sale_tctype = #{saleTctype,jdbcType=TINYINT},
      </if>
      <if test="saleTcrate != null" >
        sale_tcrate = #{saleTcrate,jdbcType=DECIMAL},
      </if>
      <if test="saleTctotal != null" >
        sale_tctotal = #{saleTctotal,jdbcType=DECIMAL},
      </if>
      <if test="isMuchspec != null" >
        is_muchspec = #{isMuchspec,jdbcType=BIT},
      </if>
      <if test="weight != null" >
        weight = #{weight,jdbcType=DECIMAL},
      </if>
      <if test="isStore != null" >
        is_store = #{isStore,jdbcType=BIT},
      </if>
      <if test="priceType != null" >
        price_type = #{priceType,jdbcType=TINYINT},
      </if>
      <if test="isWeigh != null" >
        is_weigh = #{isWeigh,jdbcType=BIT},
      </if>
      <if test="isForPoints != null" >
        is_for_points = #{isForPoints,jdbcType=BIT},
      </if>
      <if test="pointsValue != null" >
        points_value = #{pointsValue,jdbcType=DECIMAL},
      </if>
      <if test="isRanked != null" >
        is_ranked = #{isRanked,jdbcType=BIT},
      </if>
      <if test="isRecommended != null" >
        is_recommended = #{isRecommended,jdbcType=BIT},
      </if>
      <if test="memo != null" >
        memo = #{memo,jdbcType=VARCHAR},
      </if>
      <if test="createBy != null" >
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createAt != null" >
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateBy != null" >
        last_update_by = #{lastUpdateBy,jdbcType=VARCHAR},
      </if>
      <if test="lastUpdateAt != null" >
        last_update_at = #{lastUpdateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null" >
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="goodsType != null" >
        goods_type = #{goodsType,jdbcType=TINYINT},
      </if>
      <if test="isHotgood != null" >
        is_hotgood = #{isHotgood,jdbcType=BIT},
      </if>
      <if test="isNewgood != null" >
        is_newgood = #{isNewgood,jdbcType=BIT},
      </if>
      <if test="isTakeout != null" >
        is_takeout = #{isTakeout,jdbcType=BIT},
      </if>
      <if test="isTake != null" >
        is_take = #{isTake,jdbcType=BIT},
      </if>
      <if test="isOrder != null" >
        is_order = #{isOrder,jdbcType=BIT},
      </if>
      <if test="isHere != null" >
        is_here = #{isHere,jdbcType=BIT},
      </if>
      <if test="instoreCode != null" >
        instore_code = #{instoreCode,jdbcType=CHAR},
      </if>
      <if test="miniOrderNum != null" >
        mini_order_num = #{miniOrderNum,jdbcType=INTEGER},
      </if>
      <if test="purchasingPrice != null" >
        purchasing_price = #{purchasingPrice,jdbcType=DECIMAL},
      </if>
      <if test="shippingPrice1 != null" >
        shipping_price1 = #{shippingPrice1,jdbcType=DECIMAL},
      </if>
      <if test="shippingPrice2 != null" >
        shipping_price2 = #{shippingPrice2,jdbcType=DECIMAL},
      </if>
      <if test="isPricetag != null" >
        is_pricetag = #{isPricetag,jdbcType=TINYINT},
      </if>
      <if test="isCustomPrice != null" >
        is_custom_price = #{isCustomPrice,jdbcType=BIT},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="brandId != null" >
        brand_id = #{brandId,jdbcType=BIGINT},
      </if>
      <if test="localId != null" >
        local_id = #{localId,jdbcType=BIGINT},
      </if>
      <if test="saleOpenPrice != null" >
        sale_open_price = #{saleOpenPrice,jdbcType=DECIMAL},
      </if>
      <if test="combinationType != null" >
        combination_type = #{combinationType,jdbcType=TINYINT},
      </if>
        standard_name = #{standardName,jdbcType=VARCHAR},
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
      <if test="storeUpLimit != null">
        store_up_limit = #{storeUpLimit,jdbcType=DECIMAL},
      </if>
      <if test="storeLowLimit != null">
        store_low_limit = #{storeLowLimit,jdbcType=DECIMAL},
      </if>
      packing_unit_id = #{packingUnitId,jdbcType=BIGINT},
      packing_unit_name = #{packingUnitName,jdbcType=VARCHAR},
      <if test="unitRelation != null">
        unit_relation = #{unitRelation,jdbcType=DECIMAL},
      </if>
        supplier_id = #{supplierId,jdbcType=BIGINT},
        weigh_plu = #{weighPlu,jdbcType=BIGINT},
      <if test="isAllowChangePrice != null" >
        is_allow_change_price = #{isAllowChangePrice,jdbcType=BIT},
      </if>
      <if test="isAllowVipDiscount != null" >
        is_allow_vip_discount = #{isAllowVipDiscount,jdbcType=BIT},
      </if>
      <if test="boxPrice != null">
        box_price = #{boxPrice,jdbcType=DECIMAL}
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="queryGoodsList" resultType="mapUnderscoreToCamelCase">
    SELECT
    <if test="queryType == null">
      g.id,
      g.tenant_id,
      g.branch_id,
      c.id category_id,
      c.cat_name category_name,
      g.goods_code,
      g.short_name,
      u.id goods_unit_id,
      u.unit_name goods_unit_name,
      u1.id packing_unit_id,
      u1.unit_name packing_unit_name,
      g.packing_unit_id,
      g.packing_unit_name,
      g.unit_relation,
      sup.id supplier_id,
      IF(g.supplier_id = 0, '自购', sup.supplier_name) supplier_name,
      g.bar_code,
      g.mnemonic,
      g.west_name,
      g.spec,
      g.sale_price,
      g.vip_price,
      g.vip_price2,
      g.goods_status,
      g.is_dsc,
      g.is_lowerfee,
      g.is_temp,
      g.is_giveticket,
      g.is_useticket,
      g.is_score,
      g.is_changeprice,
      g.is_modifynum,
      g.is_revised_price,
      g.takeout_price,
      g.photo,
      g.goods_desc,
      g.tag,
      g.is_servicefee,
      g.is_sertc,
      g.is_saletc,
      g.sale_tctype,
      g.sale_tcrate,
      g.sale_tctotal,
      g.is_muchspec,
      g.weight,
      g.is_store,
      g.price_type,
      g.is_weigh,
      g.is_for_points,
      g.points_value,
      g.is_ranked,
      g.is_recommended,
      g.memo,
      g.create_by,
      g.create_at,
      g.last_update_by,
      g.last_update_at,
      g.is_deleted,
      g.goods_type,
      g.is_hotgood,
      g.is_newgood,
      g.is_takeout,
      g.is_take,
      g.is_order,
      g.is_here,
      g.instore_code,
      g.mini_order_num,
      g.spec_group_id,
      g.purchasing_price,
      g.shipping_price1,
      g.shipping_price2,
      g.is_pricetag,
      g.is_custom_price,
      g.version,
      g.brand_id,
      g.local_id,
      g.sale_open_price,
      g.combination_type,
      g.vip_price1,
      g.standard_name,
      g.parent_id,
      IF (
      g.standard_name IS NULL or g.standard_name="",
      g.goods_name,
      concat(g.goods_name,"(",g.standard_name,")")
      ) goods_name, b.branch_type,g.weigh_plu,
      IFNULL(gsi.score_type,0) score_type,
      IFNULL(gsi.score_value,0) score_value,
      IFNULL(gsi.score_percent,0) score_percent,
      IFNULL(g.box_price, 0) box_price
    </if>
    <if test="queryType != null">
      g.id, g.tenant_id, g.branch_id, g.goods_code, g.short_name, c.id category_id, c.cat_name category_name, u.id goods_unit_id, u.unit_name goods_unit_name, u1.id packing_unit_id,
      u1.unit_name packing_unit_name, g.unit_relation, sup.id supplier_id, IF(g.supplier_id = 0, '自购', sup.supplier_name) supplier_name, g.bar_code, g.mnemonic, g.west_name, g.spec, g.sale_price, g.vip_price, g.vip_price2, g.goods_status, g.is_dsc, g.is_lowerfee,
      g.is_temp, g.is_giveticket, g.is_useticket, g.is_score, g.is_changeprice, g.is_modifynum, g.is_revised_price, g.takeout_price, g.photo, g.goods_desc, g.tag,
      g.is_servicefee, g.is_sertc, g.is_saletc, g.sale_tctype, g.sale_tcrate, g.sale_tctotal, g.is_muchspec, g.weight, g.is_store, g.price_type, g.is_weigh, g.is_for_points, g.points_value,
      g.is_ranked, g.is_recommended, g.memo, g.create_by, g.create_at, g.last_update_by, g.last_update_at, g.is_deleted, g.goods_type, g.is_hotgood, g.is_newgood, g.is_takeout, g.is_take,
      g.is_order, g.is_here, g.instore_code, g.mini_order_num, g.spec_group_id, g.purchasing_price, g.shipping_price1, g.shipping_price2, g.is_pricetag,
      g.is_custom_price, g.version, g.brand_id, g.local_id, g.sale_open_price, g.combination_type, g.vip_price1, g.standard_name, g.parent_id, g.goods_name, b.branch_type,
      g.weigh_plu, IFNULL(gsi.score_type,0) score_type,IFNULL(gsi.score_value,0) score_value,IFNULL(gsi.score_percent,0) score_percent,IFNULL(g.box_price, 0) box_price
    </if>
      FROM goods g LEFT JOIN goods_score_info gsi ON g.tenant_id=gsi.tenant_id AND g.id=gsi.goods_id
      LEFT JOIN category c ON g.category_id = c.id LEFT JOIN goods_unit u ON u.id = g.goods_unit_id LEFT JOIN goods_unit u1 ON u1.id = g.packing_unit_id
      LEFT JOIN branch b ON g.branch_id = b.id
      LEFT JOIN supplier sup ON sup.id = g.supplier_id
      WHERE g.tenant_id=${tenantId} AND g.is_deleted=0 AND g.goods_name!='美团外卖' AND g.goods_name!='饿了么外卖'
    <if test="queryType == 0">
      AND g.parent_id=0
    </if>
    <if test="queryType == 1">
      AND g.parent_id!=0
    </if>
    <if test="havingPackage == null or havingPackage==''">
      AND g.goods_type!=2
    </if>
    <if test="havingPackage != null and havingPackage=='true'">
      AND g.goods_type in (1,2,3)
    </if>
    <if test="goodsCodeOrName != null and goodsCodeOrName!=''" >
      AND (g.goods_code like '%${goodsCodeOrName}%' or g.goods_name like '%${goodsCodeOrName}%' or g.mnemonic like '%${goodsCodeOrName}%' or g.bar_code like '%${goodsCodeOrName}%' or g.weigh_plu = '${goodsCodeOrName}')
    </if>
    <if test="barCode != null and barCode!=''" >
      AND g.bar_code = #{barCode}
    </if>
    <if test="goodsStatus != null and goodsStatus!=''" >
      AND g.goods_status= #{goodsStatus}
    </if>
    <if test="combinationType != null and combinationType!=''">
      AND g.combination_type= #{combinationType}
    </if>
    <if test="isStore != null and isStore!=''">
      AND g.is_store= #{isStore}
    </if>
    <if test="categoryId != null and categoryId!=''">
        AND (g.category_id IN (SELECT id FROM  category c where c.tenant_id=${tenantId} and (c.id=#{categoryId} or c.parent_id=#{categoryId})) OR g.category_id = #{categoryId})
    </if>
    <if test="onlySelf == 0">
      AND (g.branch_id=${branchId} OR g.branch_id=(SELECT id FROM branch WHERE tenant_id=${tenantId} AND branch_type=0))
    </if>
    <if test="onlySelf == 1">
      AND g.branch_id=${branchId}
    </if>
    <if test="onlyWeigh == 1">
      AND g.is_weigh=1
    </if>
    <if test="meituanBind!=null and meituanBind=='true'">
      AND g.id not in(SELECT mgtb.goods_id from meituan_goods_to_branch mgtb where mgtb.branch_id=${branchId} and mgtb.is_deleted=0 and mgtb.is_binding=1)
    </if>
    <if test="startSalePrice != null and startSalePrice!=''">
      AND g.sale_price &gt;= #{startSalePrice}
    </if>
    <if test="endSalePrice != null and endSalePrice!=''">
      AND g.sale_price &lt;= #{endSalePrice}
    </if>
    <if test="startPurchasingPrice != null and startPurchasingPrice!=''">
      AND g.purchasing_price &gt;= #{startPurchasingPrice}
    </if>
    <if test="endPurchasingPrice != null and endPurchasingPrice!=''">
      AND g.purchasing_price &lt;= #{endPurchasingPrice}
    </if>
    <if test="branchIds != null and branchIds != ''">
      AND g.branch_id IN (${branchIds})
    </if>
    <if test="order==null and field==null">
      ORDER BY g.create_at DESC
    </if>
    <if test="order!=null and field!=null">
      ORDER BY g.${field} ${order}
    </if>
    <if test="offset != null and rows != null">
      LIMIT ${offset},${rows}
    </if>
  </select>

  <select id="findByCondition" resultType="erp.chain.domain.Goods">
    SELECT * FROM  goods WHERE is_deleted=0
    <if test="tenantId != null and tenantId!=''" >
      AND tenant_id=${tenantId}
    </if>
    <if test="branchId != null and branchId!=''" >
      AND branch_id=${branchId}
    </if>
    <if test="goodsName != null and goodsName!=''">
      AND goods_name='${goodsName}'
    </if>
    <if test="goodsCode != null and goodsCode!=''">
      AND goods_code='${goodsCode}'
    </if>
    <if test="isStore != null and isStore!=''">
      AND is_store=#{isStore}
    </if>
    <if test="barCode != null and barCode != ''">
      AND bar_code = '${barCode}'
    </if>
    <if test="standardName != null and standardName !=''">
      AND standard_name = '${standardName}'
    </if>
    <if test="id != null and id!=''">
      AND id=#{id}
    </if>
    <if test="isImport != null and isImport == 1">
      ORDER BY create_at DESC limit 0,1
    </if>
  </select>
  <select id="findListByCondition" resultType="erp.chain.domain.Goods">
    SELECT * FROM  goods WHERE is_deleted=0
    <if test="tenantId != null and tenantId!=''" >
      AND tenant_id=#{tenantId}
    </if>
    <if test="branchId != null and branchId!=''" >
      AND branch_id=#{branchId}
    </if>
    <if test="meituanBind!=null and meituanBind=='true'">
      AND id not in(SELECT mgtb.goods_id from meituan_goods_to_branch mgtb where mgtb.branch_id=${branchId} and mgtb.is_deleted=0 and mgtb.is_binding=1)
    </if>
    <if test="goodsName != null and goodsName!=''">
      AND goods_name=#{goodsName}
    </if>
    <if test="goodsCode != null and goodsCode!=''">
      AND goods_code=#{goodsCode}
    </if>
    <if test="standardName != null and standardName!=''">
      AND standard_name=#{standardName}
    </if>
      <if test="barCode != null and barCode!=''">
          AND bar_code=#{barCode}
      </if>
    <if test="id != null and id!=''">
      AND id=#{id}
    </if>
  </select>

  <select id="queryGoodsListSum" resultType="Long">
    SELECT
      count(*)
    FROM goods g WHERE g.tenant_id=${tenantId} AND g.is_deleted=0 AND g.goods_name!='美团外卖' AND g.goods_name!='饿了么外卖'
    <if test="queryType == 0">
      AND parent_id=0
    </if>
    <if test="queryType == 1">
      AND parent_id!=0
    </if>
    <if test="havingPackage == null or havingPackage==''">
      AND g.goods_type!=2
    </if>
    <if test="havingPackage != null and havingPackage=='true'">
      AND g.goods_type in (1,2,3)
    </if>
    <if test="goodsCodeOrName != null and goodsCodeOrName!=''" >
      AND (g.goods_code like '%${goodsCodeOrName}%' or g.goods_name like '%${goodsCodeOrName}%' or g.mnemonic like '%${goodsCodeOrName}%' or g.bar_code like '%${goodsCodeOrName}%' or g.weigh_plu = '${goodsCodeOrName}')
    </if>
    <if test="goodsStatus != null and goodsStatus!=''" >
      AND g.goods_status= #{goodsStatus}
    </if>
    <if test="combinationType != null and combinationType!=''">
      AND g.combination_type= #{combinationType}
    </if>
    <if test="isStore != null and isStore!=''">
      AND g.is_store= #{isStore}
    </if>
    <if test="categoryId != null and categoryId!=''">
      AND g.category_id IN (SELECT id FROM  category c where c.tenant_id=${tenantId} and (c.id=#{categoryId} or c.parent_id=#{categoryId}))
    </if>
    <if test="onlySelf == 0">
      AND (g.branch_id=${branchId} OR g.branch_id=(SELECT id FROM branch WHERE tenant_id=${tenantId} AND branch_type=0))
    </if>
    <if test="onlySelf == 1">
      AND g.branch_id=${branchId}
    </if>
    <if test="meituanBind!=null and meituanBind=='true'">
      AND g.id not in(SELECT mgtb.goods_id from meituan_goods_to_branch mgtb where mgtb.branch_id=${branchId} and mgtb.is_deleted=0 and mgtb.is_binding=1)
    </if>
    <if test="onlyWeigh == 1">
      AND g.is_weigh=1
    </if>
    <if test="branchIds != null and branchIds != ''">
      AND g.branch_id IN (${branchIds})
    </if>
  </select>


  <select id="queryGoodsWithStoreInfoList" resultType="mapUnderscoreToCamelCase">
      SELECT g.*,s.quantity
      FROM (SELECT * FROM store WHERE tenant_id =${tenantId}  AND branch_id =${branchId} AND is_deleted = 0) s
      INNER JOIN  goods g ON g.id = s.goods_id AND g.is_deleted = 0
    <if test="categoryId != null and categoryId!=''">
      AND g.category_id IN (SELECT id FROM  category c where c.tenant_id=${tenantId} and (c.id=#{categoryId} or c.parent_id=#{categoryId}))
    </if>
      LIMIT ${offset},${rows}
  </select>
  <select id="queryGoodsWithStoreInfoListSum" resultType="Long">
      SELECT COUNT(1) total
      FROM (SELECT * FROM store WHERE tenant_id =${tenantId}  AND branch_id =${branchId} AND is_deleted = 0) s
      INNER JOIN goods g ON g.id = s.goods_id AND g.is_deleted = 0
    <if test="categoryId != null and categoryId!=''">
      AND g.category_id IN (SELECT id FROM  category c where c.tenant_id=${tenantId} and (c.id=#{categoryId} or c.parent_id=#{categoryId}))
    </if>
  </select>

  <select id="findGoodsByIdAndTenantId" resultType="erp.chain.domain.Goods">
    SELECT * FROM  goods WHERE tenant_id=${tenantId} AND id=#{id} AND is_deleted=0
  </select>
  <select id="findGoodsByIdN" resultType="erp.chain.domain.Goods">
    SELECT
      g.id,
      g.tenant_id,
      g.branch_id,
      g.category_id,
      g.category_name,
      g.goods_code,
      g.short_name,
      u.id goods_unit_id,
      u.unit_name goods_unit_name,
      u1.id packing_unit_id,
      u1.unit_name packing_unit_name,
      sup.id supplier_id,
      IF(g.supplier_id = 0, '自购', sup.supplier_name) supplier_name,
      g.bar_code,
      g.mnemonic,
      g.west_name,
      g.spec,
      g.sale_price,
      g.vip_price,
      g.vip_price2,
      g.goods_status,
      g.is_dsc,
      g.is_lowerfee,
      g.is_temp,
      g.is_giveticket,
      g.is_useticket,
      g.is_score,
      g.is_changeprice,
      g.is_modifynum,
      g.is_revised_price,
      g.takeout_price,
      g.photo,
      g.goods_desc,
      g.tag,
      g.is_servicefee,
      g.is_sertc,
      g.is_saletc,
      g.sale_tctype,
      g.sale_tcrate,
      g.sale_tctotal,
      g.is_muchspec,
      g.weight,
      g.is_store,
      g.price_type,
      g.is_weigh,
      g.is_for_points,
      g.points_value,
      g.is_ranked,
      g.is_recommended,
      g.memo,
      g.create_by,
      g.create_at,
      g.last_update_by,
      g.last_update_at,
      g.is_deleted,
      g.goods_type,
      g.is_hotgood,
      g.is_newgood,
      g.is_takeout,
      g.is_take,
      g.is_order,
      g.is_here,
      g.instore_code,
      g.mini_order_num,
      g.spec_group_id,
      g.purchasing_price,
      g.shipping_price1,
      g.shipping_price2,
      g.is_pricetag,
      g.is_custom_price,
      g.version,
      g.brand_id,
      g.local_id,
      g.sale_open_price,
      g.combination_type,
      g.vip_price1,
      g.standard_name,
      g.parent_id,
      IF (
      g.standard_name IS NULL or g.standard_name="",
      g.goods_name,
      concat(g.goods_name,"(",g.standard_name,")")
      ) goods_name
    FROM goods g
    LEFT JOIN goods_unit u ON g.goods_unit_id = u.id
    LEFT JOIN goods_unit u1 ON g.packing_unit_id = u1.id
    LEFT JOIN supplier sup ON sup.id = g.supplier_id
    WHERE g.tenant_id=${tenantId} AND g.is_deleted=0 AND g.id=#{id}
  </select>

  <select id="findGoodsWithSpec" resultType="mapUnderscoreToCamelCase">
    SELECT
    g.*,sg.id group_id,sg.`name` group_name,sup.id supplier_id, IF(g.supplier_id = 0, '自购', sup.supplier_name) supplier_name, c.cat_name cat_name,
    gu.unit_name unit_name, gu2.unit_name packing_name, b.name branch_name
    FROM  goods g
    left JOIN goods_spec_r gsr ON g.id=gsr.goods_id
    left JOIN spec_group sg ON gsr.spec_group_id=sg.id
    LEFT JOIN supplier sup ON g.supplier_id = sup.id
    LEFT JOIN category c ON g.category_id = c.id
    LEFT JOIN goods_unit gu ON g.goods_unit_id = gu.id
    LEFT JOIN goods_unit gu2 ON g.packing_unit_id = gu2.id
    LEFT JOIN branch b ON g.tenant_id = b.tenant_id AND g.branch_id = b.id
    WHERE g.tenant_id=${tenantId} AND g.id=#{id} AND g.is_deleted=0
  </select>

  <select id="getGoodsCode" resultType="String">
    SELECT  goods_code FROM goods WHERE tenant_id = #{tenantId} AND is_deleted=0 AND goods_code LIKE '${catCode}%' ORDER BY goods_code+0 DESC LIMIT 1
  </select>

  <select id="sumGoodsStore" resultType="mapUnderscoreToCamelCase">
    SELECT SUM(quantity) quantity, goods_id FROM store WHERE tenant_id=${tenantId} AND branch_id=${branchId} AND is_deleted=0 AND goods_id IN (${ids}) GROUP BY goods_id
  </select>
  <select id="countGroupGoods" resultType="mapUnderscoreToCamelCase">
    SELECT count(1) count,goods_id FROM group_goods WHERE tenant_id=${tenantId} AND branch_id=${branchId} AND is_deleted=0 AND goods_id IN (${ids}) GROUP BY goods_id
  </select>
  <select id="countMenuGoods" resultType="mapUnderscoreToCamelCase">
    SELECT
	count(1) count, goods_id
    FROM
	menu_goods mg
    INNER JOIN menu m
    ON m.tenant_id=mg.tenant_id AND m.id=mg.menu_id
    WHERE
	mg.tenant_id=${tenantId}
    AND mg.is_deleted=0 AND m.is_deleted=0 AND goods_id IN (${ids}) GROUP BY goods_id
  </select>
  <select id="countDiet" resultType="mapUnderscoreToCamelCase">
    SELECT count(1) count, goods_id FROM diet_promotion_goods_r WHERE is_use=1 AND is_deleted=0 AND goods_id IN (${ids}) AND end_date = curdate() GROUP BY goods_id
  </select>
  <select id="countRelation" resultType="mapUnderscoreToCamelCase">
    /*SELECT count(1) FROM goods_produce_relation
                                WHERE tenant_id=${tenantId}
                                AND (produce_goods_id=${goodsId} or goods_id=${goodsId})
                                AND is_deleted=0;*/
    SELECT count(1) count, IF(produce_goods_id IN (${ids}), produce_goods_id, goods_id) goods_id
    FROM goods_produce_relation
    WHERE tenant_id= ${tenantId}
    AND (produce_goods_id IN (${ids}) or goods_id IN (${ids}))
    AND is_deleted=0 GROUP BY IF(produce_goods_id IN (${ids}), produce_goods_id, goods_id)
  </select>

  <!--查询总部机构商品-->
  <select id="queryRootBranchGoodsInfo" resultType="mapUnderscoreToCamelCase">
    select * from goods g where g.is_deleted = 0
    <if test="ids != null ">
      <foreach collection="ids" close=")" open="and (" item="item" separator=" or ">
          g.id = #{item}
      </foreach>
    </if>
  </select>

  <!--批量设置菜品公共属性-->
  <update id="batchSetup" parameterType="map">
    UPDATE goods
    <set>
      <if test="categoryId !=null and categoryId != ''">
        category_id = ${categoryId},
      </if>
      <if test="categoryName != null and categoryName !=''">
        category_name = '${categoryName}',
      </if>
      <if test="goodsUnitId != null and goodsUnitId != ''">
        goods_unit_id = ${goodsUnitId},
      </if>
      <if test="goodsUnitName != null and goodsUnitName!=''">
        goods_unit_name = '${goodsUnitName}',
      </if>
      <if test="specGroupId != null and specGroupId != ''">
        spec_group_id = '${specGroupId}',
      </if>
      <if test="goodsStatus != null and goodsStatus !=''">
        goods_status = ${goodsStatus},
      </if>
      <if test="combinationType != null and combinationType != ''">
        combination_type = ${combinationType},
      </if>
      <!--<if test="purchasingPrice != null and purchasingPrice!=''">
        purchasing_price = ${purchasingPrice},
      </if>-->
      <!--<if test="salePrice != null and salePrice != ''">
        sale_price = sale_price * ${salePrice},
      </if>-->
      <if test="isChangeprice != null and isChangeprice == 1">
          vip_price = 0,
          vip_price1 = 0,
          vip_price2 = 0,
      </if>
      <if test="isChangeprice == null or isChangeprice == '' or isChangeprice != 1">
          <if test="vipPrice != null and vipPrice != ''">
              vip_price = sale_price * ${vipPrice},
          </if>
          <if test="vipPrice != null and vipPrice !=''">
              vip_price1 = sale_price * ${vipPrice},
          </if>
          <if test="vipPrice != null and vipPrice != ''">
              vip_price2 = sale_price * ${vipPrice},
          </if>
      </if>
      <if test="shippingPrice1 != null and shippingPrice1 != ''">
        shipping_price1 = sale_price * ${shippingPrice1},
      </if>
      <if test="shippingPrice1 != null and shippingPrice1 !=''">
        shipping_price2 =sale_price * ${shippingPrice1},
      </if>
      <if test="isForPoints != null and isForPoints!=''">
        is_for_points = ${isForPoints},
      </if>
      <if test="isDsc != null and isDsc != ''">
        is_dsc = ${isDsc},
      </if>
      <if test="isStore != null and isStore!= ''">
        is_store = ${isStore},
      </if>
      <if test="isPricetag != null and isPricetag !=''">
        is_pricetag = ${isPricetag},
      </if>
      <if test="isChangeprice != null">
        is_changeprice = ${isChangeprice},
      </if>
      <if test="isCustomPrice != null and isCustomPrice !=''">
        is_custom_price = ${isCustomPrice},
      </if>
      <if test="isTakeout != null and isTakeout != ''">
        is_takeout = ${isTakeout},
      </if>
      <if test="isWeigh != null and isWeigh !=''">
        is_weigh = ${isWeigh},
      </if>
      <if test="isNewgood != null and isNewgood !=''">
        is_newgood = ${isNewgood},
      </if>
      <if test="isRecommended != null and isRecommended !=''">
        is_recommended = ${isRecommended},
      </if>
      <if test="isAllowChangePrice !=null">
        is_allow_change_price=${isAllowChangePrice},
      </if>
      <if test="isAllowVipDiscount !=null">
        is_allow_vip_discount=${isAllowVipDiscount},
      </if>
      <if test="lastUpdateAt != null and lastUpdateAt !=''">
        last_update_at = '${lastUpdateAt}',
      </if>
      <if test="supplierId != null">
          supplier_id = ${supplierId},
      </if>
    </set>
    WHERE tenant_id = ${tenantId} AND branch_id = ${branchId} AND (id IN (${ids}) OR parent_id IN (${ids}))
  </update>
  <update id="updateRelated" parameterType="map">
      UPDATE goods set vip_price = 0, vip_price1 = 0, vip_price2 = 0
      WHERE tenant_id = ${tenantId} AND branch_id = ${branchId} AND related_goods_id IN (${ids})
  </update>
  <!--查询子规格数据-->
  <select id="querySpecGoods" resultType="mapUnderscoreToCamelCase">
    SELECT
    g.*,sg.id group_id,sg.`name` group_name
    FROM  goods g
    left JOIN goods_spec_r gsr ON g.id=gsr.goods_id
    left JOIN spec_group sg ON gsr.spec_group_id=sg.id
    WHERE g.tenant_id=${tenantId} AND g.parent_id=#{parentId} AND g.is_deleted=0
  </select>
  <select id="querySpecGoodsIds" resultType="mapUnderscoreToCamelCase">
    SELECT GROUP_CONCAT(id SEPARATOR ',' ) spec_ids, parent_id goods_id FROM goods WHERE tenant_id = ${tenantId} AND parent_id IN (${ids}) AND is_deleted = 0
    GROUP BY parent_id
  </select>

  <!--删除子规格-->
  <update id="deleteSpec" parameterType="map">
    UPDATE goods SET is_deleted = 1,last_update_at=NOW() WHERE tenant_id=${tenantId} AND branch_id = ${branchId}
    <if test="specId != null and specId != ''">
      AND id = ${specId}
    </if>
    <if test="parentId != null and parentId != ''">
      AND parent_id = ${parentId}
    </if>
  </update>
  <select id="findByIdAndTenantIdAndBranchIdAndGoodsTypeNotEqual" resultType="erp.chain.domain.Goods">
    select * from goods where tenant_id=${tenantId} and branch_id=${branchId}
    AND id=${goodsId} AND goods_type!=${goodsType} AND is_deleted=0
  </select>
  <select id="findMaxGoodsCodeByTenantIdAndCategoryCode" resultType="java.lang.String">
    SELECT MAX(goods_code) FROM goods WHERE tenant_id = ${tenantId} AND goods_code LIKE CONCAT(#{categoryCode}, '%') AND is_deleted = 0
  </select>
  <select id="findByTenantIdAndBranchIdGoodsNameAndIsDeleted" resultType="erp.chain.domain.Goods">
    SELECT * FROM goods WHERE tenant_id = ${tenantId} AND branch_id = ${branchId} AND goods_name = #{goodsName} AND is_deleted = 0
  </select>
  <select id="getInputMaxCode" resultType="String">
    SELECT MAX(g.goods_code) FROM goods g WHERE g.is_deleted=0 AND g.tenant_id=${tenantId} AND g.goods_code like "98%"
  </select>
  <delete id="deleteGoodsOrder">
    DELETE FROM goods_order WHERE tenant_id=${tenantId} AND branch_id=${branchId} AND goods_id in (
    <foreach item="item" collection="goodsJsonArr" separator=",">
      #{item.goodsId,jdbcType=BIGINT}
    </foreach>
    )
  </delete>
  <insert id="insertGoodsOrder">
    insert into goods_order (tenant_id, branch_id,cat_id, order_id,goods_id)
    values
    <foreach item="item" collection="goodsJsonArr" separator=",">
      (#{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT}, #{catId,jdbcType=BIGINT},
      #{item.orderId,jdbcType=BIGINT},#{item.goodsId,jdbcType=BIGINT})
    </foreach>
  </insert>
  <update id="updateLastUpdateAt">
    UPDATE goods set last_update_at=now() WHERE id in(
    <foreach item="item" collection="goodsJsonArr" separator=",">
      #{item.goodsId,jdbcType=BIGINT}
    </foreach>
    )
  </update>
  <delete id="deleteGoodsOrderByCatId">
    DELETE FROM goods_order WHERE tenant_id=${tenantId} AND goods_id=#{goodsId}
  </delete>
  <select id="listOrderGoods" resultType="mapUnderscoreToCamelCase">
    SELECT
    g.*,go.order_id
    FROM
    goods g LEFT JOIN goods_order go ON g.tenant_id=go.tenant_id AND g.id=go.goods_id AND go.branch_id=${branchId} AND go.cat_id = ${catId}
    WHERE
    g.tenant_id = ${tenantId}
    AND g.goods_type = 1
    AND g.parent_id = 0
    AND g.category_id=#{catId}
    <if test="onlySelf == 0">
      AND (g.branch_id = ${branchId} OR g.branch_id = (SELECT max(b.id) FROM branch b WHERE b.tenant_id = ${tenantId} AND b. CODE = '000' AND b.is_deleted = 0))
    </if>
    <if test="onlySelf == 1">
      AND g.branch_id = ${branchId}
    </if>
    AND g.is_deleted=0
    ORDER BY go.order_id,g.id ASC
  </select>
  <select id="listOrderPackage" resultType="mapUnderscoreToCamelCase">
    SELECT
    g.*,go.order_id
    FROM
    goods g LEFT JOIN goods_order go ON g.tenant_id=go.tenant_id AND g.id=go.goods_id AND go.branch_id=${branchId} AND go.cat_id = ${catId}
    WHERE
    g.tenant_id = ${tenantId}
    AND g.goods_type = 2
    AND g.category_id=#{catId}
    <if test="onlySelf == 0">
      AND (g.branch_id = ${branchId} OR g.branch_id = (SELECT max(b.id) FROM branch b WHERE b.tenant_id = ${tenantId} AND b. CODE = '000' AND b.is_deleted = 0))
    </if>
    <if test="onlySelf == 1">
      AND g.branch_id = ${branchId}
    </if>
    AND g.is_deleted=0
    ORDER BY go.order_id,g.id ASC
  </select>

  <!--称重PLU是否被占用-->
  <select id="isPluUsed" resultType="java.lang.Integer">
      SELECT count(1) FROM  goods WHERE tenant_id = ${tenantId}
      AND (branch_id= ${branchId} OR branch_id=(SELECT id FROM branch WHERE tenant_id=${tenantId} AND branch_type=0))
      AND weigh_plu = ${weighPlu} AND  is_deleted = 0
      <if test="goodsId != null and goods != ''">
          AND id &lt;&gt; #{goodsId}
      </if>
  </select>
  <select id="getWeighGoods" resultType="mapUnderscoreToCamelCase">
      SELECT * FROM goods WHERE tenant_id=${tenantId}
      AND (branch_id=${branchId}
      OR branch_id=(SELECT id FROM branch WHERE tenant_id=${tenantId} AND branch_type=0))
      AND is_weigh=1
      AND weigh_plu IS NOT NULL AND is_deleted = 0
      -- LENGTH(mnemonic)=5 AND mnemonic REGEXP '^[0-9]*$'
  </select>
  <!--商品部分信息查询完整信息-->
  <select id="queryGoodsInfo" resultType="mapUnderscoreToCamelCase">
      SELECT g.*, c.cat_name, u.unit_name unit_name, u1.unit_name pack_unit_name FROM goods g
      INNER JOIN category c ON g.category_id = c.id
      LEFT JOIN goods_unit u ON u.id = g.goods_unit_id
      LEFT JOIN goods_unit u1 ON u1.id = g.packing_unit_id
      WHERE g.tenant_id=${tenantId} AND (g.branch_id=${branchId} OR g.branch_id = (SELECT id FROM branch WHERE tenant_id = ${tenantId} AND branch_type = 0))
      AND ${goodsName} AND g.goods_code = '${goodsCode}'
      AND g.is_deleted = 0
  </select>
  <!--查询商品基本信息和库存信息-->
  <select id="queryGoodsStoreInfo" resultType="mapUnderscoreToCamelCase">
      SELECT g.*, c.cat_name, u.unit_name unit_name, u1.unit_name pack_unit_name, s.quantity, s.avg_amount, s.store_amount FROM goods g
      INNER JOIN category c ON g.category_id = c.id
      LEFT JOIN goods_unit u ON u.id = g.goods_unit_id
      LEFT JOIN goods_unit u1 ON u1.id = g.packing_unit_id
      LEFT JOIN store s ON g.id = s.goods_id AND g.tenant_id = s.tenant_id AND g.branch_id = s.branch_id
      WHERE g.tenant_id=#{tenantId}
      <if test="onlySelf != null and onlySelf == 0">
          AND (g.branch_id=#{branchId} OR g.branch_id = (SELECT id FROM branch WHERE tenant_id = #{tenantId} AND branch_type = 0))
      </if>
      <if test="onlySelf != null and onlySelf == 1">
          AND g.branch_id=#{branchId}
      </if>
      AND ${goodsName} AND g.goods_code = '${goodsCode}'
      AND g.is_deleted = 0 AND g.is_store = 1
  </select>
  <!--根据条码查询商品基本信息和库存信息-->
  <select id="queryGoodsStoreInfoByBarCode" resultType="mapUnderscoreToCamelCase">
    SELECT g.id,
      g.tenant_id,
      g.branch_id,
      c.id category_id,
      c.cat_name category_name,
      g.goods_code,
      g.short_name,
      u.id goods_unit_id,
      u.unit_name goods_unit_name,
      u1.id packing_unit_id,
      u1.unit_name packing_unit_name,
      g.packing_unit_id,
      g.packing_unit_name,
      g.unit_relation,
      g.bar_code,
      g.mnemonic,
      g.west_name,
      g.spec,
      g.sale_price,
      g.vip_price,
      g.vip_price2,
      g.goods_status,
      g.is_dsc,
      g.is_lowerfee,
      g.is_temp,
      g.is_giveticket,
      g.is_useticket,
      g.is_score,
      g.is_changeprice,
      g.is_modifynum,
      g.is_revised_price,
      g.takeout_price,
      g.photo,
      g.goods_desc,
      g.tag,
      g.is_servicefee,
      g.is_sertc,
      g.is_saletc,
      g.sale_tctype,
      g.sale_tcrate,
      g.sale_tctotal,
      g.is_muchspec,
      g.weight,
      g.is_store,
      g.price_type,
      g.is_weigh,
      g.is_for_points,
      g.points_value,
      g.is_ranked,
      g.is_recommended,
      g.memo,
      g.create_by,
      g.create_at,
      g.last_update_by,
      g.last_update_at,
      g.is_deleted,
      g.goods_type,
      g.is_hotgood,
      g.is_newgood,
      g.is_takeout,
      g.is_take,
      g.is_order,
      g.is_here,
      g.instore_code,
      g.mini_order_num,
      g.spec_group_id,
      g.purchasing_price,
      g.shipping_price1,
      g.shipping_price2,
      g.is_pricetag,
      g.is_custom_price,
      g.version,
      g.brand_id,
      g.local_id,
      g.sale_open_price,
      g.combination_type,
      g.vip_price1,
      g.standard_name,
      g.parent_id,
      IF (
      g.standard_name IS NULL or g.standard_name="",
      g.goods_name,
      concat(g.goods_name,"(",g.standard_name,")")
      ) goods_name,
      g.weigh_plu,
      IFNULL(g.box_price, 0) box_price, s.quantity, s.avg_amount, s.store_amount FROM goods g
    INNER JOIN category c ON g.category_id = c.id
    LEFT JOIN goods_unit u ON u.id = g.goods_unit_id
    LEFT JOIN goods_unit u1 ON u1.id = g.packing_unit_id
    LEFT JOIN store s ON g.id = s.goods_id AND g.tenant_id = s.tenant_id AND g.branch_id = s.branch_id
    WHERE g.tenant_id=${tenantId}
    <if test="onlySelf == 0">
        AND (g.branch_id=${branchId} OR g.branch_id=(SELECT id FROM branch WHERE tenant_id=${tenantId} AND branch_type=0))
    </if>
    <if test="onlySelf == 1">
        AND g.branch_id=${branchId}
    </if>
    AND g.bar_code = '${barCode}'
    AND g.is_deleted = 0 AND g.is_store = 1
  </select>

  <!--查询商品是否在套餐中被使用-->
  <select id="getGroupsByGoodsId" resultType="java.lang.Integer">
    SELECT count(1) FROM group_goods WHERE tenant_id = ${tenantId} AND goods_id = #{goodsId} AND is_deleted = 0
  </select>

  <!--根据关联ID查询套餐信息-->
  <select id="queryPackageByGoodsId" resultType="mapUnderscoreToCamelCase">
    SELECT * FROM goods WHERE related_goods_id = ${goodsId} AND tenant_id = ${tenantId} AND is_deleted = 0
  </select>

  <select id="findElemeMappingGoodses" resultType="mapUnderscoreToCamelCase">
    SELECT
    eleme_goods_mapping.eleme_goods_id,
    goods.id AS goods_id,
    goods.goods_name
    FROM eleme_goods_mapping
    LEFT OUTER JOIN goods ON goods.id = eleme_goods_mapping.our_goods_id AND goods.is_deleted = 0
    WHERE eleme_goods_mapping.tenant_id = ${tenantId}
    AND eleme_goods_mapping.branch_id = ${branchId}
    AND eleme_goods_mapping.eleme_goods_id IN
    <foreach collection="elemeGoodsIds" index="index" item="elemeGoodsId" open="(" separator="," close=")">
      #{elemeGoodsId}
    </foreach>
  </select>

  <select id="listGoodses" resultType="mapUnderscoreToCamelCase">
    SELECT
    id,
    goods_code,
    goods_name,
    standard_name
    FROM goods
    WHERE tenant_id = ${tenantId}
    AND branch_id = ${branchId}
    AND is_deleted = 0
    AND id NOT IN (SELECT our_goods_id FROM eleme_goods_mapping WHERE tenant_id = ${tenantId} AND branch_id = ${branchId}
      <if test="goodsId != null">
        AND our_goods_id != #{goodsId}
      </if>
    )
    <if test="categoryId != null">
        AND category_id = #{categoryId}
    </if>
    <if test="codeOrName != null">
        <bind name="codeOrName" value="'%' + codeOrName + '%'"></bind>
        AND (goods_code LIKE #{codeOrName} OR goods_name LIKE #{codeOrName})
    </if>
  </select>

    <select id="findAllElemeGoodsInfos" resultType="mapUnderscoreToCamelCase">
        SELECT
        eleme_goods_mapping.eleme_goods_id,
        goods.id,
        goods_name
        FROM eleme_goods_mapping
        INNER JOIN goods ON goods.id = eleme_goods_mapping.our_goods_id AND goods.is_deleted = 0
        WHERE eleme_goods_mapping.tenant_id = ${tenantId}
        AND eleme_goods_mapping.branch_id = ${branchId}
        AND eleme_goods_mapping.eleme_goods_id IN
        <foreach collection="elemeGoodsIds" index="index" item="elemeGoodsId" open="(" separator="," close=")">
            #{elemeGoodsId}
        </foreach>
    </select>

  <!--根据编码查询商品-->
  <select id="findGoodsByCode" resultType="erp.chain.domain.Goods">
    SELECT * FROM goods WHERE tenant_id = ${tenantId} AND  branch_id = ${branchId} AND goods_code = '${goodsCode}' AND is_deleted = 0
    <if test="parentId != null and parentId != ''">
      AND parent_id = ${parentId} AND standard_name = '${standardName}'
    </if>
    <if test="parentId == null or parentId == ''">
      AND parent_id = 0
    </if>
  </select>

  <update id="updateUnitOrCategory">
    UPDATE goods
    <set>
      <if test="unitName != null">
        goods_unit_name = '${unitName}',
      </if>
      <if test="pUnitName != null">
        packing_unit_name = '${pUnitName}',
      </if>
      <if test="catName != null">
        category_name = '${catName}'
      </if>
    </set>
    WHERE is_deleted = 0 AND tenant_id = ${tenantId} AND branch_id = ${branchId}
    <if test="unitId != null">
      AND goods_unit_id = ${unitId}
    </if>
    <if test="pUnitId != null">
      AND packing_unit_id = ${pUnitId}
    </if>
    <if test="cateId != null">
      AND category_id = ${cateId}
    </if>
  </update>
  <delete id="deleteGoodsScore">
    DELETE FROM goods_score_info WHERE tenant_id=${tenantId} AND goods_id=${goodsId}
  </delete>
  <insert id="saveGoodsScore">
    INSERT INTO goods_score_info(goods_id,tenant_id,branch_id,score_type,score_value,score_percent)
    VALUES (#{goodsId},#{tenantId},#{branchId},#{scoreType},#{scoreValue},#{scorePercent})
  </insert>
  <select id="getGoodsScoreInfo" resultType="mapUnderscoreToCamelCase">
    SELECT
    	g.category_id,
    	gsi.*
    FROM
    	goods g
    LEFT JOIN goods_score_info gsi ON g.tenant_id = gsi.tenant_id
    AND g.id = gsi.goods_id
    WHERE
    	g.id = #{goodsId}
    AND g.tenant_id = #{tenantId}
    LIMIT 1
  </select>

  <!--批量删除-->
  <update id="delGoods">
      UPDATE goods SET is_deleted = 1, last_update_at = NOW(), last_update_by = 'System' WHERE tenant_id = ${tenantId}
      AND (id IN (${ids}) OR parent_id IN (${ids}))
  </update>

  <update id="delStoreOrderDetailOfGoods">
      UPDATE store_order_detail SET is_deleted = 1, last_update_at = NOW(), last_update_by = 'System' WHERE tenant_id = #{tenantId}
      AND goods_id IN (${ids})
  </update>

  <update id="delLyStoreOrderDetailOfGoods">
      UPDATE ly_store_order_detail SET is_deleted = 1, last_update_at = NOW(), last_update_by = 'System' WHERE tenant_id = #{tenantId}
      AND goods_id IN (${ids})
  </update>

  <update id="delCheckOrderDetailOfGoods">
      UPDATE check_order_detail SET is_deleted = 1, last_update_at = NOW(), last_update_by = 'System' WHERE tenant_id = #{tenantId}
      AND goods_id IN (${ids})
  </update>

  <update id="delSyStoreOrderDetailOfGoods">
      UPDATE sy_store_order_detail SET is_deleted = 1, last_update_at = NOW(), last_update_by = 'System' WHERE tenant_id = #{tenantId}
      AND goods_id IN (${ids})
  </update>

  <update id="delPsStoreOrderDetailOfGoods">
      UPDATE ps_store_order_detail SET is_deleted = 1, last_update_at = NOW(), last_update_by = 'System' WHERE tenant_id = #{tenantId}
      AND goods_id IN (${ids})
  </update>

  <!--检验条码-->
  <select id="checkBarCode" resultType="mapUnderscoreToCamelCase">
    SELECT * FROM goods WHERE tenant_id = #{tenantId}
    <if test="branchId != null and branchId != ''">
        AND branch_id = #{branchId}
    </if>
    AND bar_code = '${barCode}' AND is_deleted = 0
  </select>

  <!--检验条码,is_store是否库存管理-->
  <select id="doCheckBarCode" resultType="mapUnderscoreToCamelCase">
    SELECT * FROM goods WHERE tenant_id = #{tenantId}
    <if test="barCode != null and barCode != ''">
      AND bar_code = #{barCode}
    </if>
    AND is_deleted = 0 AND is_store = 1
  </select>

    <!--查询条码称-->
    <select id="scaleList" resultType="mapUnderscoreToCamelCase">
        SELECT * FROM scale WHERE is_deleted = 0
    </select>
    
    <select id="scaleById" resultType="mapUnderscoreToCamelCase">
        SELECT * FROM scale WHERE is_deleted = 0 AND id = ${id}
    </select>

    <select id="findParentIdByCode" resultType="mapUnderscoreToCamelCase">
        SELECT id FROM goods WHERE tenant_id = ${tenantId} AND branch_id = ${branchId} AND goods_code = '${goodsCode}' AND parent_id = 0 AND is_deleted = 0 ORDER BY create_at DESC ;
    </select>

  <select id="orderedGoods" resultType="mapUnderscoreToCamelCase">
    select * from goods_order where tenant_id=#{tenantId} and branch_id=#{branchId} and cat_id=#{catId}
  </select>
  <select id="getGoodsByCatId" resultType="erp.chain.domain.Goods">
    select * from goods where tenant_id=#{tenantId} and category_id=#{catId} and is_deleted=0
  </select>

  <delete id="deleteGoodsOrderV2">
    DELETE FROM goods_order WHERE tenant_id=${tenantId} AND branch_id=${branchId}
  </delete>
  <insert id="insertGoodsOrderV2">
    insert into goods_order (tenant_id, branch_id,cat_id, order_id,goods_id)
    values
    <foreach item="item" collection="goodsJsonArr" separator=",">
      (#{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT}, #{item.catId,jdbcType=BIGINT},
      #{item.orderId,jdbcType=BIGINT},#{item.goodsId,jdbcType=BIGINT})
    </foreach>
  </insert>
  <update id="deleteMeituanGoodsToBranch">
    update meituan_goods_to_branch set is_deleted=1,last_update_at=now() where tenant_id=#{tenantId}
    and branch_id=#{branchId} and goods_id=#{goodsId}
  </update>

    <!--积分商城-->
    <select id="shopGoodsList" parameterType="map" resultType="erp.chain.domain.ShopGoods">
        SELECT * FROM shop_goods WHERE tenant_id = #{tenantId} AND branch_id = #{branchId} AND is_deleted = 0
        <if test="goodsCodeOrName != null and goodsCodeOrName != ''">
            AND goods_name LIKE '%${goodsCodeOrName}%'
        </if>
        ORDER BY create_at DESC
    </select>
    <select id="shopGoodsCount" parameterType="map" resultType="java.lang.Integer">
        SELECT count(*) FROM shop_goods WHERE tenant_id = #{tenantId} AND branch_id = #{branchId} AND is_deleted = 0
        <if test="goodsCodeOrName != null and goodsCodeOrName != ''">
            AND goods_name LIKE '%${goodsCodeOrName}%'
        </if>
    </select>
    <insert id="insertShopGoods" parameterType="map">
        INSERT INTO shop_goods (id, tenant_id, branch_id, goods_name, start_date, end_date, sale_price, change_type, change_quantity, is_limit, limit_quantity,
        is_ticket, ticket_id, goods_status, effect_date, date_type, memo, goods_id, create_at, create_by, last_update_at, last_update_by, is_deleted, photo,
        use_score, use_money, already_change_quantity, surplus_quantity
        )
        VALUES (#{id,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT}, #{branchId,jdbcType=BIGINT}, #{goodsName,jdbcType=VARCHAR}, #{startDate,jdbcType=TIMESTAMP},
        #{endDate,jdbcType=TIMESTAMP}, #{salePrice,jdbcType=DECIMAL}, #{changeType,jdbcType=TINYINT}, #{changeQuantity,jdbcType=DECIMAL}, #{isLimit,jdbcType=TINYINT},
        #{limitQuantity,jdbcType=DECIMAL}, #{isTicket,jdbcType=BIT}, #{ticketId,jdbcType=BIGINT}, #{goodsStatus,jdbcType=BIT}, #{effectDate,jdbcType=TINYINT},
        #{dateType,jdbcType=TINYINT}, #{memo,jdbcType=VARCHAR}, #{goodsId,jdbcType=BIGINT}, #{createAt,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, #{lastUpdateAt,jdbcType=TIMESTAMP},
        #{lastUpdateBy,jdbcType=VARCHAR}, #{isDeleted,jdbcType=BIT},#{photo,jdbcType=VARCHAR}, #{useScore,jdbcType=DECIMAL},#{useMoney,jdbcType=DECIMAL},
        #{alreadyChangeQuantity,jdbcType=DECIMAL},#{surplusQuantity,jdbcType=DECIMAL}
        )
    </insert>
    <select id="isUsedName" resultType="java.lang.Integer">
        SELECT count(1) FROM shop_goods WHERE tenant_id = #{tenantId} AND goods_name = #{goodsName} AND is_deleted = 0
    </select>
    <update id="updateShopGoods">
        UPDATE shop_goods
        <set>
            <if test="goodsName != null">
                goods_name = #{goodsName,jdbcType=VARCHAR},
            </if>
            <if test="startDate != null">
                start_date = #{startDate,jdbcType=TIMESTAMP},
            </if>
            <if test="endDate != null">
                end_date = #{endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="salePrice != null">
                sale_price = #{salePrice,jdbcType=DECIMAL},
            </if>
            <if test="changeType != null">
                change_type = #{changeType,jdbcType=TINYINT},
            </if>
            <if test="changeQuantity != null">
                change_quantity = #{changeQuantity,jdbcType=DECIMAL},
            </if>
            <if test="isLimit != null">
                is_limit = #{isLimit,jdbcType=TINYINT},
            </if>
            <if test="limitQuantity != null">
                limit_quantity = #{limitQuantity,jdbcType=DECIMAL},
            </if>
            <if test="isTicket != null">
                is_ticket = #{isTicket,jdbcType=TINYINT},
            </if>
            ticket_id = #{ticketId,jdbcType=BIGINT},
            <if test="goodsStatus != null">
                goods_status = #{goodsStatus,jdbcType=TINYINT},
            </if>
            <if test="effectDate != null">
                effect_date = #{effectDate,jdbcType=TINYINT},
            </if>
            <if test="dateType != null">
                date_type = #{dateType,jdbcType=TINYINT},
            </if>
            memo = #{memo,jdbcType=VARCHAR},
            <if test="goodsId != null">
                goods_id = #{goodsId,jdbcType=BIGINT},
            </if>
            <if test="lastUpdateAt != null">
                last_update_at = #{lastUpdateAt,jdbcType=TIMESTAMP},
            </if>
            <if test="lastUpdateBy != null">
                last_update_by = #{lastUpdateBy,jdbcType=VARCHAR},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted,jdbcType=BIT},
            </if>
            <if test="useScore != null">
                use_score = #{useScore,jdbcType=DECIMAL},
            </if>
            <if test="useMoney != null">
                use_money = #{useMoney,jdbcType=DECIMAL},
            </if>
            <if test="alreadyChangeQuantity != null">
                already_change_quantity = #{alreadyChangeQuantity,jdbcType=DECIMAL},
            </if>
            <if test="surplusQuantity != null">
                surplus_quantity = #{surplusQuantity,jdbcType=DECIMAL}
            </if>
            WHERE tenant_id = #{tenantId,jdbcType=BIGINT} AND branch_id = #{branchId,jdbcType=BIGINT} AND id = #{id,jdbcType=BIGINT}
        </set>
    </update>
    <select id="findShopGoodsById" parameterType="map" resultType="erp.chain.domain.ShopGoods">
        SELECT sg.*, cc.card_name ticket_name, cc.card_type FROM shop_goods sg
        LEFT JOIN card_coupons cc ON sg.tenant_id = cc.tenant_id AND sg.ticket_id = cc.id
        WHERE sg.tenant_id = #{tenantId} AND sg.branch_id = #{branchId} AND sg.id = #{id} AND sg.is_deleted = 0
    </select>
    <update id="delShopGoods">
        UPDATE shop_goods SET is_deleted = 1 WHERE tenant_id = #{tenantId} AND id IN (${ids})
    </update>

    <update id="updatePrice" parameterType="java.util.Map">
        UPDATE goods SET sale_price = #{info.salePrice, jdbcType=DECIMAL}, vip_price = #{info.vipPrice, jdbcType=DECIMAL},
        vip_price1 = #{info.vipPrice, jdbcType=DECIMAL}, vip_price2 = #{info.vipPrice, jdbcType=DECIMAL}
        WHERE tenant_id = #{tenantId, jdbcType=BIGINT} AND branch_id = #{branchId, jdbcType=BIGINT} AND id = #{info.id,jdbcType=BIGINT}
    </update>
</mapper>